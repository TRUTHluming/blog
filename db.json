{"meta":{"version":1,"warehouse":"4.0.2"},"models":{"Asset":[{"_id":"themes/next/source/css/main.styl","path":"css/main.styl","modified":0,"renderable":1},{"_id":"themes/next/source/css/noscript.styl","path":"css/noscript.styl","modified":0,"renderable":1},{"_id":"themes/next/source/js/bookmark.js","path":"js/bookmark.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/comments-buttons.js","path":"js/comments-buttons.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/comments.js","path":"js/comments.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/config.js","path":"js/config.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/motion.js","path":"js/motion.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/next-boot.js","path":"js/next-boot.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/pjax.js","path":"js/pjax.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/schedule.js","path":"js/schedule.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/utils.js","path":"js/utils.js","modified":0,"renderable":1},{"_id":"themes/next/source/images/apple-touch-icon-next.png","path":"images/apple-touch-icon-next.png","modified":0,"renderable":1},{"_id":"themes/next/source/images/avatar.gif","path":"images/avatar.gif","modified":0,"renderable":1},{"_id":"themes/next/source/images/favicon-16x16-next.png","path":"images/favicon-16x16-next.png","modified":0,"renderable":1},{"_id":"themes/next/source/images/favicon-32x32-next.png","path":"images/favicon-32x32-next.png","modified":0,"renderable":1},{"_id":"themes/next/source/images/logo-algolia-nebula-blue-full.svg","path":"images/logo-algolia-nebula-blue-full.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/logo.svg","path":"images/logo.svg","modified":0,"renderable":1},{"_id":"themes/next/source/js/third-party/addtoany.js","path":"js/third-party/addtoany.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/third-party/fancybox.js","path":"js/third-party/fancybox.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/third-party/pace.js","path":"js/third-party/pace.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/third-party/quicklink.js","path":"js/third-party/quicklink.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/schemes/muse.js","path":"js/schemes/muse.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/third-party/analytics/baidu-analytics.js","path":"js/third-party/analytics/baidu-analytics.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/third-party/analytics/google-analytics.js","path":"js/third-party/analytics/google-analytics.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/third-party/analytics/growingio.js","path":"js/third-party/analytics/growingio.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/third-party/analytics/matomo.js","path":"js/third-party/analytics/matomo.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/third-party/chat/chatra.js","path":"js/third-party/chat/chatra.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/third-party/chat/gitter.js","path":"js/third-party/chat/gitter.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/third-party/chat/tidio.js","path":"js/third-party/chat/tidio.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/third-party/comments/changyan.js","path":"js/third-party/comments/changyan.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/third-party/comments/disqus.js","path":"js/third-party/comments/disqus.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/third-party/comments/disqusjs.js","path":"js/third-party/comments/disqusjs.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/third-party/comments/gitalk.js","path":"js/third-party/comments/gitalk.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/third-party/comments/isso.js","path":"js/third-party/comments/isso.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/third-party/comments/livere.js","path":"js/third-party/comments/livere.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/third-party/comments/utterances.js","path":"js/third-party/comments/utterances.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/third-party/math/katex.js","path":"js/third-party/math/katex.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/third-party/math/mathjax.js","path":"js/third-party/math/mathjax.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/third-party/search/algolia-search.js","path":"js/third-party/search/algolia-search.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/third-party/search/local-search.js","path":"js/third-party/search/local-search.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/third-party/statistics/firestore.js","path":"js/third-party/statistics/firestore.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/third-party/statistics/lean-analytics.js","path":"js/third-party/statistics/lean-analytics.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/third-party/tags/mermaid.js","path":"js/third-party/tags/mermaid.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/third-party/tags/pdf.js","path":"js/third-party/tags/pdf.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/third-party/tags/wavedrom.js","path":"js/third-party/tags/wavedrom.js","modified":0,"renderable":1}],"Cache":[{"_id":"source/_posts/hello-world.md","hash":"8d291081c949459108ae2065ed37b4ac205d3ac9","modified":1686114586935},{"_id":"themes/next/LICENSE.md","hash":"68fc9a03d50fd4b5ea97092b05967d1819dea2c4","modified":1686111711696},{"_id":"themes/next/README.md","hash":"36c4b25587ca494102323dab5a38de5490451a64","modified":1686111711727},{"_id":"themes/next/_vendors.yml","hash":"5aa3b0573d47f85b1be7d21ced21c7810b37ecef","modified":1686111712415},{"_id":"themes/next/_config.yml","hash":"c829469daeb21fd029eec23beda6ef26efff322a","modified":1686132203954},{"_id":"themes/next/package.json","hash":"81f58b70b6601e5273c7b21f0751d923c1124180","modified":1686111711680},{"_id":"themes/next/docs/AGPL3.md","hash":"0d2b8c5fa8a614723be0767cc3bca39c49578036","modified":1686111711696},{"_id":"themes/next/docs/AUTHORS.md","hash":"a648823121563c34a177ae91f5a774b5e29f01a0","modified":1686111711696},{"_id":"themes/next/docs/LICENSE.txt","hash":"f5b14f791b7cfa1d16da981d929152e088a5d1b8","modified":1686111712407},{"_id":"themes/next/languages/README.md","hash":"b2567e32805dda79601157351a07e5ca9fe01315","modified":1686111711727},{"_id":"themes/next/languages/ar.yml","hash":"7d0f39e8684284a04bb9808521c87fecda8bd131","modified":1686111712415},{"_id":"themes/next/languages/bn.yml","hash":"9f791494afa263c3e31f14b8a5fa2996dfc834c0","modified":1686111712415},{"_id":"themes/next/languages/de.yml","hash":"79b37df731c29665dee6cd7c90d278e1edfb6e24","modified":1686111712431},{"_id":"themes/next/languages/en.yml","hash":"ba0fd79a2b1d8db01a034180556061745965ff05","modified":1686111712431},{"_id":"themes/next/languages/es.yml","hash":"dffc63ef42e1266b88e0acf08994fd17a9908d53","modified":1686111712431},{"_id":"themes/next/languages/fa.yml","hash":"f3ffc444599f4ac92d62e9ed00a1490ebc277d70","modified":1686111712431},{"_id":"themes/next/languages/fr.yml","hash":"44cd26479f503751329f6da2ed80cce1bbf18117","modified":1686111712431},{"_id":"themes/next/languages/id.yml","hash":"929df147f4f17d638b07de5fe52ca13e2549ab1c","modified":1686111712446},{"_id":"themes/next/languages/it.yml","hash":"16d716ecfd748def2f6486ef5a82d0ab7ceb4890","modified":1686111712446},{"_id":"themes/next/languages/ja.yml","hash":"543222bfc516aab6c33e8534f807972ecb8943a9","modified":1686111712446},{"_id":"themes/next/languages/ko.yml","hash":"d345a303310c8a5f4836c3683f3580f861ebd1b4","modified":1686111712446},{"_id":"themes/next/languages/pt-BR.yml","hash":"76b8576ce228d540a16b1f0af5af2cce20923194","modified":1686111712446},{"_id":"themes/next/languages/nl.yml","hash":"3cb3687696635ec71b4ca40c5fc43b56acc8843e","modified":1686111712446},{"_id":"themes/next/languages/pt.yml","hash":"70de366e10ea584ba039d40d6b35ac97f93454ad","modified":1686111712462},{"_id":"themes/next/languages/ru.yml","hash":"c6d8de0ff7d8148d09993257cfd3b7aca755696c","modified":1686111712462},{"_id":"themes/next/languages/si.yml","hash":"2d712eedf3f60d04d36c3108cf5a12e2a52e875c","modified":1686111712462},{"_id":"themes/next/languages/th.yml","hash":"6829e998b39f8f143e20b276bb1f62d95a29de58","modified":1686111712462},{"_id":"themes/next/languages/tk.yml","hash":"511726054873f6f8d7ce0d2e803f6731de0ddbe7","modified":1686111712524},{"_id":"themes/next/languages/tr.yml","hash":"a57e4ed089b893a95f5e1ecff17ce625165f4d46","modified":1686111712524},{"_id":"themes/next/languages/uk.yml","hash":"ff537047b4b4c3ca9a7b64fa7f428a9942751eeb","modified":1686111712524},{"_id":"themes/next/languages/vi.yml","hash":"7ebcba5e1128784195e4681dffc9d34c4e873fec","modified":1686111712524},{"_id":"themes/next/languages/zh-CN.yml","hash":"741d7efe0262c9cdc2c648014b55599665d90f6b","modified":1686111712524},{"_id":"themes/next/languages/zh-HK.yml","hash":"88ea50eeb9097ab4a87a44981a102d8594feb064","modified":1686111712540},{"_id":"themes/next/languages/zh-TW.yml","hash":"4695c87d6b81b3a23d16ad6513d9eaa925f8d8ad","modified":1686111712540},{"_id":"themes/next/layout/_layout.njk","hash":"fc0a45112f2dcfc2642404e8934ea32a793c3bd7","modified":1686111711727},{"_id":"themes/next/layout/archive.njk","hash":"d759f4d2cf5ddc6875ea250113a00662c1caf6d1","modified":1686111711743},{"_id":"themes/next/layout/category.njk","hash":"c68b7343d0f8145010f93351908cc36ef6212ec1","modified":1686111711758},{"_id":"themes/next/layout/index.njk","hash":"dd63e488ae8cc144335a5958acedf6a16edd7a92","modified":1686111711821},{"_id":"themes/next/layout/page.njk","hash":"b0660b2af0ac7d3fda14ca4d9f2c9e79ef06c6f9","modified":1686111711868},{"_id":"themes/next/layout/post.njk","hash":"0bfce9f133f501a9a4837257e3b862b3bbca15be","modified":1686111711894},{"_id":"themes/next/layout/tag.njk","hash":"9e16ba20c28a7f2c6bc75aa427f48122301a30aa","modified":1686111711900},{"_id":"themes/next/docs/ru/README.md","hash":"ac3c4a7616ea80f0d32d68d6e53233952ba756dc","modified":1686111711727},{"_id":"themes/next/docs/zh-CN/CODE_OF_CONDUCT.md","hash":"7a06d443f374bd1e84294067a0ac796afd9fbe60","modified":1686111711696},{"_id":"themes/next/docs/zh-CN/CONTRIBUTING.md","hash":"a089f7a8368ab0b7d7b9b7ec0ac3767a453435df","modified":1686111711696},{"_id":"themes/next/docs/zh-CN/README.md","hash":"9bbdbb0656505acceef9b9895a576164175fe888","modified":1686111711727},{"_id":"themes/next/layout/_partials/comments.njk","hash":"d0c470b0f6690aa217e9ada848c5e2e73fb27c6f","modified":1686111711774},{"_id":"themes/next/layout/_partials/footer.njk","hash":"c40760b559c516677c8b11a00ba50c011f2079fd","modified":1686111711790},{"_id":"themes/next/layout/_partials/languages.njk","hash":"e43f22198cccb5f6e306b1ce0d28d12a4fb891f8","modified":1686111711821},{"_id":"themes/next/layout/_partials/pagination.njk","hash":"bc719473ed5948ab6859449d60b8d36cfc1542b4","modified":1686111711870},{"_id":"themes/next/layout/_partials/widgets.njk","hash":"e7f988ecddb2159313699a00827a45eca5622bd4","modified":1686111711918},{"_id":"themes/next/layout/_macro/post-collapse.njk","hash":"1a30d751871dabfa80940042ddb1f77d07d830b9","modified":1686111711876},{"_id":"themes/next/layout/_macro/post.njk","hash":"95822069cce2c4702e035c770b3089bc12a3404c","modified":1686111711892},{"_id":"themes/next/layout/_macro/sidebar.njk","hash":"547c62ab14d9e05d2d9116db9048a677fbe1fb6d","modified":1686111711900},{"_id":"themes/next/layout/_scripts/index.njk","hash":"6668878a0f9a1166c6a879755f54a08d942da870","modified":1686111711805},{"_id":"themes/next/layout/_scripts/vendors.njk","hash":"be80b9fe415a9a09d74c28e230995fd292dfc123","modified":1686111711918},{"_id":"themes/next/layout/_third-party/addtoany.njk","hash":"ef64c6bfb8540cd874701236b9be47db2496e98e","modified":1686111711743},{"_id":"themes/next/layout/_third-party/fancybox.njk","hash":"844559f46e2ff1c8be234d5763703106e2072a7b","modified":1686111711790},{"_id":"themes/next/layout/_third-party/index.njk","hash":"bda05391c72f7a25731e762077636c4a97fc4910","modified":1686111711821},{"_id":"themes/next/layout/_third-party/pace.njk","hash":"d7ad5714079f7f65446f880baf14722435ca9061","modified":1686111711851},{"_id":"themes/next/layout/_third-party/quicklink.njk","hash":"0efed71ed530447718c4ea5bbd5fc8695b0b0d5f","modified":1686111711896},{"_id":"themes/next/scripts/events/index.js","hash":"bd9ea82376cd87df611ea3ae077875c7c595a3df","modified":1686111711563},{"_id":"themes/next/scripts/filters/default-injects.js","hash":"872f01cb10e422a648ea505436532e776e92926b","modified":1686111711495},{"_id":"themes/next/scripts/filters/locals.js","hash":"9eb5310664759931287dd28ea39165dfb67f12ed","modified":1686111711585},{"_id":"themes/next/scripts/filters/minify.js","hash":"964a01bec35a95da974882295cababcb93219b40","modified":1686111711614},{"_id":"themes/next/scripts/filters/post.js","hash":"fdc8a0af90035e89c3fcb754a0eb189b8951a2bc","modified":1686111711649},{"_id":"themes/next/scripts/helpers/engine.js","hash":"d292b78485e8e8055712b0ed6de7cf559c5fbdcd","modified":1686111711512},{"_id":"themes/next/scripts/helpers/font.js","hash":"3394185a7f0393c16ce52c8028f90da3e9239c55","modified":1686111711517},{"_id":"themes/next/scripts/helpers/navigation.js","hash":"78107021101553c3d23e89290f7530b60cf4aa86","modified":1686111711625},{"_id":"themes/next/scripts/helpers/next-config.js","hash":"226fccbe9c93265e65a300e3cb4bf6f9065cfdd7","modified":1686111711630},{"_id":"themes/next/scripts/helpers/next-paginator.js","hash":"e86c764b546e4fbb87970cabc4135a56f9ef9fe1","modified":1686111711632},{"_id":"themes/next/scripts/helpers/next-url.js","hash":"fd24abfaba4d91923ddb6aecf0268b216678c8bd","modified":1686111711633},{"_id":"themes/next/scripts/helpers/next-vendors.js","hash":"afdd6a188a74c188f0dd154fac70efd4080ca262","modified":1686111711633},{"_id":"themes/next/scripts/tags/button.js","hash":"c6ad2ed544fbb25ecb5d820c36e76302504271b7","modified":1686111711453},{"_id":"themes/next/scripts/tags/caniuse.js","hash":"935a311142a409c1896b3ae3f01fe7a9e2db1134","modified":1686111711455},{"_id":"themes/next/scripts/tags/center-quote.js","hash":"92c19d796bdb3320df9caea59bf52df7a95d9da9","modified":1686111711457},{"_id":"themes/next/scripts/tags/group-pictures.js","hash":"9ed799c329abf830f623689d7e136991256a24ca","modified":1686111711554},{"_id":"themes/next/scripts/tags/index.js","hash":"1f6aba7820f1fb58b61969485148db21846e1aa9","modified":1686111711565},{"_id":"themes/next/scripts/tags/label.js","hash":"8a73348186113bae0a51ea2f891c1bb882fab05a","modified":1686111711567},{"_id":"themes/next/scripts/tags/link-grid.js","hash":"18a483c2d5afd701f6080ffdddf2d1321370336c","modified":1686111711585},{"_id":"themes/next/scripts/tags/mermaid.js","hash":"4fb01ca650fa8b256b8d48f50dc1b18350bd3d6d","modified":1686111711608},{"_id":"themes/next/scripts/tags/note.js","hash":"7b94ddb46b7d4b0fe815f2fbe4bd375f07f55363","modified":1686111711633},{"_id":"themes/next/scripts/tags/pdf.js","hash":"344636b6fd7e27e8831c1e194039afc0d61931cd","modified":1686111711633},{"_id":"themes/next/scripts/tags/tabs.js","hash":"0eabe51da40b4b13e16419c8fe02452d9a4fef73","modified":1686111711649},{"_id":"themes/next/scripts/tags/video.js","hash":"2ee926448583be8f95af1f2884ae2c9c4830151d","modified":1686111711680},{"_id":"themes/next/scripts/tags/wavedrom.js","hash":"b44dfeeb58b41945d469141787f3dbce4b117d08","modified":1686111711680},{"_id":"themes/next/source/css/_colors.styl","hash":"3c6798c10cc220d83481cb3f3782e78558cee789","modified":1686111711955},{"_id":"themes/next/source/css/_mixins.styl","hash":"83647a6207333b9609ba90b0946b3fa9548e6381","modified":1686111711985},{"_id":"themes/next/source/css/main.styl","hash":"921a58577f411cf4eb5cfd66db0a241f8f88578c","modified":1686111712204},{"_id":"themes/next/source/css/noscript.styl","hash":"dadc81256afb127b77eac6763d5ee0ec9c77f0a3","modified":1686111712261},{"_id":"themes/next/source/js/bookmark.js","hash":"0f563ffbf05fad30e854e413ab17ff7164ab5a53","modified":1686111711437},{"_id":"themes/next/source/js/comments-buttons.js","hash":"1a7344440321713426a0b2ab17e276b5bdf85ade","modified":1686111711467},{"_id":"themes/next/source/js/comments.js","hash":"66ae2e26ea36a41b72c638ea8b220296638ae952","modified":1686111711467},{"_id":"themes/next/source/js/config.js","hash":"4c4ebbe3b3f3841a26f9d5af6d0ba8bc6da01c54","modified":1686111711489},{"_id":"themes/next/source/js/motion.js","hash":"770d63c26f22705311028a36b52e999cc8a2da82","modified":1686111711617},{"_id":"themes/next/source/js/next-boot.js","hash":"da0f07f9eaaa83de70128b0feaea3fdadb90457a","modified":1686111711627},{"_id":"themes/next/source/js/pjax.js","hash":"b03ba78c6916ad2f390d55bc1bc18fafb64b0ebf","modified":1686111711649},{"_id":"themes/next/source/js/schedule.js","hash":"a1333258726caf84f368a8f8454639c7dc1626bb","modified":1686111711649},{"_id":"themes/next/source/js/utils.js","hash":"5e1cf39de050964e97fb3ba0825aeec7f4bc36dd","modified":1686111711665},{"_id":"themes/next/source/images/apple-touch-icon-next.png","hash":"2959dbc97f31c80283e67104fe0854e2369e40aa","modified":1686111711947},{"_id":"themes/next/source/images/avatar.gif","hash":"2dbc3e2f2d624b2ca1afe6edc2ca17307f1950c8","modified":1686111711421},{"_id":"themes/next/source/images/favicon-16x16-next.png","hash":"943a0d67a9cdf8c198109b28f9dbd42f761d11c3","modified":1686111711950},{"_id":"themes/next/source/images/favicon-32x32-next.png","hash":"0749d7b24b0d2fae1c8eb7f671ad4646ee1894b1","modified":1686111711952},{"_id":"themes/next/source/images/logo-algolia-nebula-blue-full.svg","hash":"b85e274207b1392782476a0430feac98db1e7da0","modified":1686111712402},{"_id":"themes/next/source/images/logo.svg","hash":"099e11ab995a2c8981427a85476d082609848c77","modified":1686111712405},{"_id":"themes/next/layout/_partials/head/head-unique.njk","hash":"8da52a144060db1a0a088ccb2e6cc8376d1fce70","modified":1686111711805},{"_id":"themes/next/layout/_partials/head/head.njk","hash":"5388b157bba4a40b9312f4a45c6678974ccf0837","modified":1686111711805},{"_id":"themes/next/layout/_partials/header/brand.njk","hash":"dd9c4c03e99dfde0dfb8edefcb2c933f2f560efc","modified":1686111711758},{"_id":"themes/next/layout/_partials/header/index.njk","hash":"650de421a8ce4cf685428ffbe0087ff84cbd1356","modified":1686111711805},{"_id":"themes/next/layout/_partials/header/menu-item.njk","hash":"41a8b0cc16f60fa085cb719d07216d86b6bc4bf8","modified":1686111711851},{"_id":"themes/next/layout/_partials/header/menu.njk","hash":"ee6fc2f111572d3eeab0a2fecbb2d6b3e37ab26b","modified":1686111711851},{"_id":"themes/next/layout/_partials/header/sub-menu.njk","hash":"06480d8ec5f0b87eafd47f082f07968d7282dd5c","modified":1686111711900},{"_id":"themes/next/layout/_partials/page/breadcrumb.njk","hash":"89825e75cc45e9709fa6ba89883669eedaff6f46","modified":1686111711758},{"_id":"themes/next/layout/_partials/page/categories.njk","hash":"17156d99941f28a225951ffdcfa9a115e20dc2d2","modified":1686111711758},{"_id":"themes/next/layout/_partials/page/page-header.njk","hash":"7ed4f102a1825195cff8d7995bf9219f323a9034","modified":1686111711851},{"_id":"themes/next/layout/_partials/page/schedule.njk","hash":"0f4bc8e257da60f77c0c1738607b2bde55810684","modified":1686111711898},{"_id":"themes/next/layout/_partials/page/tags.njk","hash":"a18d1598e36cc72f2b0b24c3cc3c5990dfaa3254","modified":1686111711900},{"_id":"themes/next/layout/_partials/post/post-copyright.njk","hash":"79667fd0be85ee0e0c69e542e4f870b114c96c33","modified":1686111711879},{"_id":"themes/next/layout/_partials/post/post-followme.njk","hash":"c1e33b4889f75acc490af3c8bde0ec56c518ff41","modified":1686111711881},{"_id":"themes/next/layout/_partials/post/post-meta.njk","hash":"9fa47e4fb342811da590ee4adc91cf81118c0a39","modified":1686111711884},{"_id":"themes/next/layout/_partials/post/post-related.njk","hash":"e0986db00a0201dd3c60570f964829c84ba5bc68","modified":1686111711886},{"_id":"themes/next/layout/_partials/post/post-reward.njk","hash":"e8b8a7c41e9ec612d0c0c73419529d55d1c16256","modified":1686111711888},{"_id":"themes/next/layout/_partials/post/post-share.njk","hash":"ce90c97f222d9c751a08392e9b14d2bdf0f3df1a","modified":1686111711890},{"_id":"themes/next/layout/_partials/search/algolia-search.njk","hash":"efb2b6f19df02ba5ae623a1f274fff52aed21e6f","modified":1686111711743},{"_id":"themes/next/layout/_partials/search/index.njk","hash":"8f6f256ab3b351ffc80f1f3f1d9834e9a7cfac31","modified":1686111711805},{"_id":"themes/next/layout/_partials/search/localsearch.njk","hash":"661f7acae43f0be694266323320f977d84119abe","modified":1686111711841},{"_id":"themes/next/layout/_partials/sidebar/site-overview.njk","hash":"70342218473a6e6aa9148de06bfffe121afb8548","modified":1686111711900},{"_id":"themes/next/layout/_third-party/analytics/baidu-analytics.njk","hash":"6215309aee028dcb734452beec448c5afb6c63fc","modified":1686111711743},{"_id":"themes/next/layout/_third-party/analytics/cloudflare.njk","hash":"a5b8297c2c383124dd6a56e256ecc0c0dcf489be","modified":1686111711774},{"_id":"themes/next/layout/_third-party/analytics/google-analytics.njk","hash":"d89066ff53879693f023e540d59c86137172c529","modified":1686111711790},{"_id":"themes/next/layout/_third-party/analytics/growingio.njk","hash":"8afaa772c390bd9d53a5cff9645ac3168334eb98","modified":1686111711805},{"_id":"themes/next/layout/_third-party/analytics/index.njk","hash":"f900306497b133e8b098bd9f4b96b93d1d96c185","modified":1686111711805},{"_id":"themes/next/layout/_third-party/analytics/matomo.njk","hash":"4e89648a8ec8194c5823064cbca39c938a799006","modified":1686111711851},{"_id":"themes/next/layout/_third-party/analytics/microsoft-clarity.njk","hash":"9dc00fcb0a05899f048eace9f9160b78956655d5","modified":1686111711851},{"_id":"themes/next/layout/_third-party/analytics/plausible.njk","hash":"ef9f2bb7110507f1c4336800af9157d5fa9765bd","modified":1686111711873},{"_id":"themes/next/layout/_third-party/analytics/umami.njk","hash":"3343750682fbd8535e50f8129be3003ad26015b4","modified":1686111711918},{"_id":"themes/next/layout/_third-party/chat/chatra.njk","hash":"d7263fca16d0278ccf1f6aa1c6df6902a6344a09","modified":1686111711774},{"_id":"themes/next/layout/_third-party/chat/gitter.njk","hash":"f8cc14b7aa949999a1faaeb7855e2f20b59a386d","modified":1686111711790},{"_id":"themes/next/layout/_third-party/chat/tidio.njk","hash":"02aab857c27fc103216029be991688b12a73a525","modified":1686111711918},{"_id":"themes/next/layout/_third-party/comments/changyan.njk","hash":"d1c950f8fbdf85e7a3eae5463767a89e858e8220","modified":1686111711774},{"_id":"themes/next/layout/_third-party/comments/disqus.njk","hash":"9375b19a89b7fa9474e558d085af5448d4c5c50c","modified":1686111711774},{"_id":"themes/next/layout/_third-party/comments/disqusjs.njk","hash":"0749cb6902baecdfd01f779a2a2513f6d2f6a823","modified":1686111711790},{"_id":"themes/next/layout/_third-party/comments/gitalk.njk","hash":"b63b7e2ede0d3e66e732fa1a06bda9b19e1e85d4","modified":1686111711790},{"_id":"themes/next/layout/_third-party/comments/isso.njk","hash":"64cc3bdaf644fd32c0d0a247f29f5b6904da9af3","modified":1686111711821},{"_id":"themes/next/layout/_third-party/comments/livere.njk","hash":"3b13b09fba84ec6000886890a6710736a2b8fafe","modified":1686111711839},{"_id":"themes/next/layout/_third-party/comments/utterances.njk","hash":"5a94032bc3512a10ad4328fc19ec07b819a1d687","modified":1686111711918},{"_id":"themes/next/layout/_third-party/math/index.njk","hash":"abf37fc55aa86702118e8fdf5bf2d389dd589aa0","modified":1686111711821},{"_id":"themes/next/layout/_third-party/math/katex.njk","hash":"1ebf658690468ea197bdd0416eb7cfa4bd0b083a","modified":1686111711821},{"_id":"themes/next/layout/_third-party/math/mathjax.njk","hash":"3677017fd4572b158311f5f5d870590ab25184e0","modified":1686111711845},{"_id":"themes/next/layout/_third-party/search/algolia-search.njk","hash":"24ed76e0c72a25ac152820c750a05826a706b6f4","modified":1686111711743},{"_id":"themes/next/layout/_third-party/search/localsearch.njk","hash":"e45ea3542cdc9ed7ec8447b5e6f35df4c5e82758","modified":1686111711843},{"_id":"themes/next/layout/_third-party/statistics/busuanzi-counter.njk","hash":"a4bc501da0f22f7e420f0ca47e83988ce90b1368","modified":1686111711758},{"_id":"themes/next/layout/_third-party/statistics/firestore.njk","hash":"d32ebe94560fa95824478ebbff531bffc47b194d","modified":1686111711790},{"_id":"themes/next/layout/_third-party/statistics/index.njk","hash":"568ddf7955d11d93fb5e842b403a7ac8b1b7fdb1","modified":1686111711821},{"_id":"themes/next/layout/_third-party/statistics/lean-analytics.njk","hash":"2446e748cdc102c78492216319ac02148db7daf6","modified":1686111711837},{"_id":"themes/next/layout/_third-party/tags/mermaid.njk","hash":"099e031f52fb8e47b3af5b2684737efc9e643ee7","modified":1686111711851},{"_id":"themes/next/layout/_third-party/tags/pdf.njk","hash":"2c81984cc4f5123103460442f6e046f5b6c97127","modified":1686111711871},{"_id":"themes/next/layout/_third-party/tags/wavedrom.njk","hash":"02202bf563fb5eedde2ccad4d6c5b9109d30a703","modified":1686111711918},{"_id":"themes/next/scripts/events/lib/config.js","hash":"9ec51eb61f7fee612ffc5252f489003a0fa301fc","modified":1686111711486},{"_id":"themes/next/scripts/events/lib/highlight.js","hash":"6aec7b2c38c50989a23bfaa0d560e75c7f553e12","modified":1686111711559},{"_id":"themes/next/scripts/events/lib/injects.js","hash":"d987709267a1bc6e5014411e9983d7c49c102c16","modified":1686111711567},{"_id":"themes/next/scripts/events/lib/navigation.js","hash":"dd3562686d95a50375e6fd32e717ccb0d99c1e3d","modified":1686111711623},{"_id":"themes/next/scripts/events/lib/utils.js","hash":"6853e5433e3eaa19ea43fa20b08d956ba4cec4ac","modified":1686111711649},{"_id":"themes/next/scripts/events/lib/vendors.js","hash":"64e4024376b51fe81be7ad80235abdf0a83853bd","modified":1686111711665},{"_id":"themes/next/scripts/filters/comment/changyan.js","hash":"5798cfc8f63665031dd3e01debed051628cec319","modified":1686111711463},{"_id":"themes/next/scripts/filters/comment/common.js","hash":"19a402a225c31edffc50f202a14e0d582d3db23e","modified":1686111711467},{"_id":"themes/next/scripts/filters/comment/default-config.js","hash":"93ee5f9109dad885dc38c49bcee630c10f9dce6e","modified":1686111711492},{"_id":"themes/next/scripts/filters/comment/disqus.js","hash":"7f71d6b271ba65ff333d5682e7575711d368c0d2","modified":1686111711499},{"_id":"themes/next/scripts/filters/comment/disqusjs.js","hash":"a600a98e7436edeb31e291abca359885567df3c9","modified":1686111711505},{"_id":"themes/next/scripts/filters/comment/gitalk.js","hash":"7bb7dafdd7f6bca8464b54e17e552ce7f1714195","modified":1686111711517},{"_id":"themes/next/scripts/filters/comment/isso.js","hash":"ff8b5b5145220a17d0ecd9508ba9bd2d3b2da47d","modified":1686111711567},{"_id":"themes/next/scripts/filters/comment/livere.js","hash":"5a07d8bb52bc1d51a624ca8db54be144566c306b","modified":1686111711585},{"_id":"themes/next/scripts/filters/comment/utterances.js","hash":"d3bded697bc32dace689d2a6dfb6eb7514169d15","modified":1686111711665},{"_id":"themes/next/source/css/_variables/Gemini.styl","hash":"96e0a7c2a65ce68215e17e369085b2ea2f1334f2","modified":1686111712048},{"_id":"themes/next/source/css/_variables/Muse.styl","hash":"e3be898f5ebcf435a26542653a9297ff2c71aeb0","modified":1686111712228},{"_id":"themes/next/source/css/_variables/Mist.styl","hash":"a1418c9dc8c0f1a0ad4ded0f4627c45bf0db1a10","modified":1686111712223},{"_id":"themes/next/source/css/_variables/Pisces.styl","hash":"48f4f277946a168d0db1ea02804e85c22ca2c7db","modified":1686111712271},{"_id":"themes/next/source/css/_variables/base.styl","hash":"c4fc4e862d09221265ab1466085f057be2ad2e4d","modified":1686111712016},{"_id":"themes/next/source/js/third-party/addtoany.js","hash":"5276c8f78ee562a8965216dc67d762e59cb4a9f2","modified":1686111711437},{"_id":"themes/next/source/js/third-party/fancybox.js","hash":"c098d14e65dd170537134358d4b8359ad0539c2c","modified":1686111711514},{"_id":"themes/next/source/js/third-party/pace.js","hash":"0ef04218b93561ba4d0ff420d556c3d90a756d32","modified":1686111711633},{"_id":"themes/next/source/js/third-party/quicklink.js","hash":"eed02e6fced8e5a653077205d4d4d7834ca71472","modified":1686111711649},{"_id":"themes/next/source/js/schemes/muse.js","hash":"ba7ba2c129d1f240c6a22cec3e53f3f22af64b6b","modified":1686111711621},{"_id":"themes/next/source/css/_common/components/back-to-top.styl","hash":"7664491542046df9a3887cf40a06e00c0b4086a9","modified":1686111712016},{"_id":"themes/next/source/css/_common/components/index.styl","hash":"2298e521253b3bf376a2412271bc2a7d305051f3","modified":1686111712063},{"_id":"themes/next/source/css/_common/components/reading-progress.styl","hash":"90a86045a33c1bae49fc2f6fa1e1b53170c7f77b","modified":1686111712300},{"_id":"themes/next/source/css/_common/outline/index.styl","hash":"8e34df131830d4fa3725e4590a672ba1cf1903e5","modified":1686111712173},{"_id":"themes/next/source/css/_common/outline/mobile.styl","hash":"580aa86ed2ec05a7382338a6eea02e9c740b02a5","modified":1686111712226},{"_id":"themes/next/source/css/_common/scaffolding/base.styl","hash":"d0a7c99095f490b0d2ed6b1be43d435960798cec","modified":1686111712016},{"_id":"themes/next/source/css/_common/scaffolding/buttons.styl","hash":"a042571d85ff7265f799004239a45f36b716b8a6","modified":1686111712032},{"_id":"themes/next/source/css/_common/scaffolding/comments.styl","hash":"e4fecc889ba3317a64e9abba5842c79dff9b7827","modified":1686111712032},{"_id":"themes/next/source/css/_common/scaffolding/index.styl","hash":"523fb7b653b87ae37fc91fc8813e4ffad87b0d7e","modified":1686111712188},{"_id":"themes/next/source/css/_common/scaffolding/normalize.styl","hash":"b56367ea676ea8e8783ea89cd4ab150c7da7a060","modified":1686111712231},{"_id":"themes/next/source/css/_common/scaffolding/pagination.styl","hash":"f4228c759db4a650c8d38745c2edd1dc83c45687","modified":1686111712267},{"_id":"themes/next/source/css/_common/scaffolding/tables.styl","hash":"e840b23d33023e6d45e018f6e84b683dd56efd8d","modified":1686111712336},{"_id":"themes/next/source/css/_common/scaffolding/toggles.styl","hash":"782ee1fc5e669d3ddbfeb82b73ad7fe561f1a4fb","modified":1686111712343},{"_id":"themes/next/source/css/_schemes/Gemini/index.styl","hash":"9dfe853c901bdc52fc950bacdf15484dbb9bf140","modified":1686111712188},{"_id":"themes/next/source/css/_schemes/Mist/_header.styl","hash":"dafc6d23c80d6fe3e55a7711e94210d2479b629a","modified":1686111711960},{"_id":"themes/next/source/css/_schemes/Mist/_layout.styl","hash":"fa4fd8f76464e214fb7318f325b13c2b62f4b478","modified":1686111711967},{"_id":"themes/next/source/css/_schemes/Mist/_menu.styl","hash":"fb550935d374e0bdf1097fce187337dc05cad3e1","modified":1686111711967},{"_id":"themes/next/source/css/_schemes/Mist/_posts-expand.styl","hash":"485d23ccb42c0d0c8ead7ea8930dd3e06d79a285","modified":1686111712002},{"_id":"themes/next/source/css/_schemes/Mist/index.styl","hash":"ab16a3dcdc0393b9b582ef59dcc13db9320e917c","modified":1686111712188},{"_id":"themes/next/source/css/_schemes/Muse/_header.styl","hash":"3fbfab591f280e2e7f3b0265901c93bc4bd137ed","modified":1686111711963},{"_id":"themes/next/source/css/_schemes/Muse/_layout.styl","hash":"6569a6640f79d247a8235b3914772c0e2f99ead2","modified":1686111711967},{"_id":"themes/next/source/css/_schemes/Muse/_menu.styl","hash":"b7f48be3c43bfa393d62142544a5487a67871713","modified":1686111711967},{"_id":"themes/next/source/css/_schemes/Muse/_sidebar.styl","hash":"547c0b5cd5e7ea10d21863d13a6b16579a49396c","modified":1686111712005},{"_id":"themes/next/source/css/_schemes/Muse/_sub-menu.styl","hash":"c48ccd8d6651fe1a01faff8f01179456d39ba9b1","modified":1686111712009},{"_id":"themes/next/source/css/_schemes/Muse/index.styl","hash":"6ad168288b213cec357e9b5a97674ff2ef3a910c","modified":1686111712188},{"_id":"themes/next/source/css/_schemes/Pisces/_header.styl","hash":"ac2dc0ce9c775a83ef7132ae957b54539366ac9c","modified":1686111711967},{"_id":"themes/next/source/css/_schemes/Pisces/_layout.styl","hash":"26a0cba1eee5de45a45a5e14e17707f905390512","modified":1686111711967},{"_id":"themes/next/source/css/_schemes/Pisces/_menu.styl","hash":"72dc825c50357402c342d62ab60fc0c478ab6bc1","modified":1686111711982},{"_id":"themes/next/source/css/_schemes/Pisces/_sidebar.styl","hash":"91dbf3ca5c3a613d4e30618c120da535bf2d0336","modified":1686111712007},{"_id":"themes/next/source/css/_schemes/Pisces/_sub-menu.styl","hash":"778ed2ad5643b93970c95626b325defeb586733f","modified":1686111712011},{"_id":"themes/next/source/css/_schemes/Pisces/index.styl","hash":"8000075b227749a7495eaf417cac6ccfbe441580","modified":1686111712188},{"_id":"themes/next/source/js/third-party/analytics/baidu-analytics.js","hash":"f629acc46ff40c071ffd31b77d5c7616f0fdd778","modified":1686111711437},{"_id":"themes/next/source/js/third-party/analytics/google-analytics.js","hash":"59684383385059dc4f8a1ff85dbbeb703bcdbcb5","modified":1686111711552},{"_id":"themes/next/source/js/third-party/analytics/growingio.js","hash":"78dd3cf04082b7dbe6246e404b2aa8e726922402","modified":1686111711556},{"_id":"themes/next/source/js/third-party/analytics/matomo.js","hash":"c6a25b26a1443caa70b47fd3dfa282271574deb5","modified":1686111711606},{"_id":"themes/next/source/js/third-party/chat/chatra.js","hash":"c32180522788c10e51df1803aa6842ef0432ddc9","modified":1686111711467},{"_id":"themes/next/source/js/third-party/chat/gitter.js","hash":"cc38c94125f90dadde11b5ebac7d8bf99a1a08a2","modified":1686111711548},{"_id":"themes/next/source/js/third-party/chat/tidio.js","hash":"b0079f6a4601e06ca6fe46e83a2f5af553e9bc3c","modified":1686111711649},{"_id":"themes/next/source/js/third-party/comments/changyan.js","hash":"260d1a77d6a3bb33a579d3e4cca1997003e799b5","modified":1686111711467},{"_id":"themes/next/source/js/third-party/comments/disqus.js","hash":"da361917d65e5dca8362f8cdeb6c8cc0e8316cec","modified":1686111711503},{"_id":"themes/next/source/js/third-party/comments/disqusjs.js","hash":"1e826dea3f684c0515f362dc1352447a1f0eae71","modified":1686111711508},{"_id":"themes/next/source/js/third-party/comments/gitalk.js","hash":"0ec038cf83e8ec067534f16a54041e47a3c1e59a","modified":1686111711546},{"_id":"themes/next/source/js/third-party/comments/isso.js","hash":"753a873b6f566aff5ba77ca23f91b78eb880ca64","modified":1686111711567},{"_id":"themes/next/source/js/third-party/comments/livere.js","hash":"2247d88c934c765c43013337860774aaa99f0b31","modified":1686111711585},{"_id":"themes/next/source/js/third-party/comments/utterances.js","hash":"f67f90eb03e284c82da2b8cf2f1e31801813c16d","modified":1686111711665},{"_id":"themes/next/source/js/third-party/math/katex.js","hash":"83c54ee536e487a1031783443fe0cb63b1b4767e","modified":1686111711567},{"_id":"themes/next/source/js/third-party/math/mathjax.js","hash":"5c749b9c1c3bb738122d0516211ecff6496d4907","modified":1686111711604},{"_id":"themes/next/source/js/third-party/search/algolia-search.js","hash":"fdb7b7cef1a147d897e7f7cd8903b58368ec2062","modified":1686111711437},{"_id":"themes/next/source/js/third-party/search/local-search.js","hash":"4536cb6d0a9bbaaa86fab3fa0101f6a3a3ec5a76","modified":1686111711585},{"_id":"themes/next/source/js/third-party/statistics/firestore.js","hash":"6e0682bb42170d61b13b786295f45f9c785f8b73","modified":1686111711517},{"_id":"themes/next/source/js/third-party/statistics/lean-analytics.js","hash":"835cbf54c49ef1327f47df70ff2636ad36b6f57d","modified":1686111711567},{"_id":"themes/next/source/js/third-party/tags/mermaid.js","hash":"f27d817b0c2138dd3215b1f46af0753f60a008f3","modified":1686111711612},{"_id":"themes/next/source/js/third-party/tags/pdf.js","hash":"af78c22f0e61c8c8aa8794e585e0d632c6d4fcb8","modified":1686111711633},{"_id":"themes/next/source/js/third-party/tags/wavedrom.js","hash":"40dcd10df6edf124088c329346e0cc0bdac74ef1","modified":1686111711680},{"_id":"themes/next/source/css/_common/components/pages/breadcrumb.styl","hash":"8afdc311c6b8db121758371f95cf1c5e77354f42","modified":1686111712032},{"_id":"themes/next/source/css/_common/components/pages/categories.styl","hash":"b6e2eb1550a7845cb2adf86081a4ab6c7bde1e68","modified":1686111712032},{"_id":"themes/next/source/css/_common/components/pages/index.styl","hash":"7504dbc5c70262b048143b2c37d2b5aa2809afa2","modified":1686111712063},{"_id":"themes/next/source/css/_common/components/pages/schedule.styl","hash":"6b816c2511242ee503fb5f34cd3e4dcdafc06b85","modified":1686111712300},{"_id":"themes/next/source/css/_common/components/pages/tag-cloud.styl","hash":"1a81d1a71fcf0699629ce6e72dfd0a15f3a2dd0a","modified":1686111712341},{"_id":"themes/next/source/css/_common/components/post/index.styl","hash":"098d4bd034e986fcf7e443eac4fc2193935461b7","modified":1686111712095},{"_id":"themes/next/source/css/_common/components/post/post-body.styl","hash":"d757768a58743601d0d84158ba955eb15d4c3c01","modified":1686111712273},{"_id":"themes/next/source/css/_common/components/post/post-collapse.styl","hash":"ec37a36e94ba791663607a5022f763915778578f","modified":1686111712283},{"_id":"themes/next/source/css/_common/components/post/post-followme.styl","hash":"1ecfd64507954810b07a9d21fb5305b5378feda0","modified":1686111712283},{"_id":"themes/next/source/css/_common/components/post/post-footer.styl","hash":"11497388f124bfbb4001495a67d3629a9f618405","modified":1686111712283},{"_id":"themes/next/source/css/_common/components/post/post-gallery.styl","hash":"aa366d37389760c8595529b850f461569577a1c5","modified":1686111712283},{"_id":"themes/next/source/css/_common/components/post/post-header.styl","hash":"010c901e4ef49a606f8a350efbf09044e76d2ff3","modified":1686111712283},{"_id":"themes/next/source/css/_common/components/post/post-nav.styl","hash":"9ac6f477177264c26a46e8333b8456720a0444dc","modified":1686111712283},{"_id":"themes/next/source/css/_common/components/post/post-reward.styl","hash":"04cf4a69537fc14d3b8904f965d283356853847f","modified":1686111712298},{"_id":"themes/next/source/css/_common/components/post/post-widgets.styl","hash":"ebfba158a0a4af3d1dabcacbc58986664de52140","modified":1686111712300},{"_id":"themes/next/source/css/_common/components/third-party/disqusjs.styl","hash":"877a537d5b95beb048142e4fdee6f17e6ef9c7bb","modified":1686111712048},{"_id":"themes/next/source/css/_common/components/third-party/gitalk.styl","hash":"8f094c4ac17e2ab45569b12d157747f9c7333c12","modified":1686111712048},{"_id":"themes/next/source/css/_common/components/third-party/gitter.styl","hash":"35104dc6883a61c31e0e368dac8ac2f697be62fe","modified":1686111712048},{"_id":"themes/next/source/css/_common/components/third-party/index.styl","hash":"77550e0d3e029b7458e35d8c5ae1fbd612c9673b","modified":1686111712095},{"_id":"themes/next/source/css/_common/components/third-party/search.styl","hash":"e72799ce3f9b79753e365b2f8c8ef6c310668d4a","modified":1686111712300},{"_id":"themes/next/source/css/_common/components/third-party/math.styl","hash":"9d995eb4871a6c273d9d51558676a1fdabf69e72","modified":1686111712204},{"_id":"themes/next/source/css/_common/components/third-party/utterances.styl","hash":"56d90ae0559caa55b75f3c300ff2711f9ed65fc4","modified":1686111712345},{"_id":"themes/next/source/css/_common/outline/footer/index.styl","hash":"4e967702cf4c637132346bc74ec8854426f1a68c","modified":1686111712173},{"_id":"themes/next/source/css/_common/outline/header/index.styl","hash":"6e0d0796ef7fbbb62ffdfb448753a850de82c74f","modified":1686111712173},{"_id":"themes/next/source/css/_common/outline/header/bookmark.styl","hash":"e74f4bb47a101b014ee2a1783c87f3b87323f9a0","modified":1686111712032},{"_id":"themes/next/source/css/_common/outline/header/menu.styl","hash":"b750af2fb833c10c4313b5a4258237161a7833d7","modified":1686111712204},{"_id":"themes/next/source/css/_common/outline/header/site-meta.styl","hash":"a851e9d5aefcd027c95eeb323860b6da70f202d1","modified":1686111712329},{"_id":"themes/next/source/css/_common/outline/header/site-nav.styl","hash":"bf3ad8b4268f763a1e26377681644887694bc009","modified":1686111712332},{"_id":"themes/next/source/css/_common/outline/sidebar/index.styl","hash":"da5e88f8debd5ac8d7af5c6ba6240df66104955f","modified":1686111712173},{"_id":"themes/next/source/css/_common/outline/sidebar/related-posts.styl","hash":"b05908f04ef95f2d91e6eba89b12411c378d050f","modified":1686111712300},{"_id":"themes/next/source/css/_common/outline/sidebar/sidebar-author-links.styl","hash":"52fc98b1435129eb3edb9293ced9e507741f1350","modified":1686111712300},{"_id":"themes/next/source/css/_common/outline/sidebar/sidebar-author.styl","hash":"5b38ac4a0f1ade0e681aff0e3366c481d9cf3dcd","modified":1686111712300},{"_id":"themes/next/source/css/_common/outline/sidebar/sidebar-blogroll.styl","hash":"c6a27beb3f741211a14576026f3b4cfc44cc6407","modified":1686111712317},{"_id":"themes/next/source/css/_common/outline/sidebar/sidebar-button.styl","hash":"b926e368f702f8686aaa2eb98d3d2e533418958c","modified":1686111712319},{"_id":"themes/next/source/css/_common/outline/sidebar/sidebar-nav.styl","hash":"24752d145c6fb8f5344dca9c7b9640839c02e009","modified":1686111712322},{"_id":"themes/next/source/css/_common/outline/sidebar/site-state.styl","hash":"26dd0adfcb1db6df29c6090c8d7e9b5a43583fb0","modified":1686111712334},{"_id":"themes/next/source/css/_common/outline/sidebar/sidebar-toc.styl","hash":"c2e354a565c8c1b32bd0ceacc972b17982758b67","modified":1686111712324},{"_id":"themes/next/source/css/_common/outline/sidebar/sidebar-toggle.styl","hash":"9a7c71560fbdc936ad4e736fe15063ea3e8a644b","modified":1686111712326},{"_id":"themes/next/source/css/_common/scaffolding/highlight/copy-code.styl","hash":"670fc109b56a010b166b86b616823a1aae97a738","modified":1686111712032},{"_id":"themes/next/source/css/_common/scaffolding/highlight/index.styl","hash":"9056be572ec1cfa429abb22be4b45a662d5b0fb1","modified":1686111712173},{"_id":"themes/next/source/css/_common/scaffolding/tags/blockquote-center.styl","hash":"d6418fd2bbfba7b73ddf11ec62db9637fdf5d8af","modified":1686111712016},{"_id":"themes/next/source/css/_common/scaffolding/tags/group-pictures.styl","hash":"393ff96234e4196b569d4b11496774eb78e147de","modified":1686111712063},{"_id":"themes/next/source/css/_common/scaffolding/tags/index.styl","hash":"22cd37bd5df9972d5074710896aba4424ad5161c","modified":1686111712188},{"_id":"themes/next/source/css/_common/scaffolding/tags/label.styl","hash":"debee14539272fbe3835a7d3853af2230baa3501","modified":1686111712204},{"_id":"themes/next/source/css/_common/scaffolding/tags/link-grid.styl","hash":"7f8a7345e6537a62cd9e9a94c8f7065b541d9b04","modified":1686111712204},{"_id":"themes/next/source/css/_common/scaffolding/tags/mermaid.styl","hash":"48d35dba575a7c9e8845b16652e76b7d4a4646de","modified":1686111712221},{"_id":"themes/next/source/css/_common/scaffolding/tags/note.styl","hash":"98d4c20aff0f0fcfe1824017fb06ab21ef0d218e","modified":1686111712264},{"_id":"themes/next/source/css/_common/scaffolding/tags/pdf.styl","hash":"b6654a1d7cf82577d8263faffee8af3ad4a5c0e8","modified":1686111712269},{"_id":"themes/next/source/css/_common/scaffolding/tags/tabs.styl","hash":"7a39bcce7274284e87388743db62afc847fe6897","modified":1686111712339},{"_id":"themes/next/source/css/_common/scaffolding/tags/wavedrom.styl","hash":"af113411ad9cca7674177be36af8dd399680834d","modified":1686111712347},{"_id":"themes/next/source/css/_common/outline/header/github-banner.styl","hash":"38c64c2d04e46848382bfa246a0e9c508294767b","modified":1686111712048},{"_id":"source/_posts/11.md","hash":"01b4b45f797395830caf030049a4efa82262315e","modified":1686111923046},{"_id":"source/about/index.md","hash":"bd85935ee4f9eee2de05aa1463a09ac3cfbd0979","modified":1686113898877},{"_id":"source/archives/index.md","hash":"c121f78335ac0f616b48ab9d70013305d52ed4d0","modified":1686114595972},{"_id":"source/categories/index.md","hash":"de96e1d3220cfb49cc7a962f8353786614a98619","modified":1686114602605},{"_id":"source/tags/index.md","hash":"a8d32aa59221030a4655eb5f7b09764233c51e3b","modified":1686114618768},{"_id":"source/_posts/STL.md","hash":"e9442c61b6241e1a677b7ff51026eee25533f1ca","modified":1686113742066},{"_id":"source/_posts/encrypt.md","hash":"d16de46b1b2a5d9a5a76ff82ce58116da17b3c4d","modified":1686113763383},{"_id":"source/_posts/前缀和与差分.md","hash":"196c5931c874803521e7ffce0baf276b8a701766","modified":1686113777537},{"_id":"source/_posts/圣经.md","hash":"5084b63a5d0f7a5b6c909d72679cde272f0c74b1","modified":1686113785964},{"_id":"source/_posts/排序.md","hash":"8b7b06391118d59e8411191632c814cb64e7e93e","modified":1686113794130},{"_id":"source/_posts/期末前规划表.md","hash":"c3c4c70249fb376a4665fa55839c1517c422eb5e","modified":1686113802309},{"_id":"source/_posts/生日.md","hash":"60fe475626c9f70b2379fe2553d0b04f82bea856","modified":1686113832140},{"_id":"source/_data/styles.styl","hash":"f1bfc48f58ed2d867d456cea939c230219219ab6","modified":1686132049882}],"Category":[],"Data":[{"_id":"styles","data":"body {\n  background-image: url(\"/images/Background.jpg\");\n  background-repeat: no-repeat;\n  background-attachment: fixed;\n  background-position: center;\n}\n.content-wrap {\n  opacity: 0.85;\n}\n.header-inner {\n  background: rgba(255,255,255,0.85);\n  border-radius: 0px 0px 30px 30px;\n  box-shadow: 8px 7px 2px 0 rgba(0,0,0,0.12), 7px 4px 1px -2px rgba(0,0,0,0.06), 0 1px 5px 0 rgba(0,0,0,0.12);\n}\n.popup {\n  opacity: 0.85;\n}\n.post-block {\n  background-color: #fff;\n  margin-bottom: 24px;\n  padding: 20px;\n  border-radius: 0px 0px 30px 30px;\n  box-shadow: 8px 7px 2px 0 rgba(0,0,0,0.12), 7px 4px 1px -2px rgba(0,0,0,0.06), 0 1px 5px 0 rgba(0,0,0,0.12);\n}\n.post-block + .post-block {\n  background-color: #fff;\n  margin-bottom: 24px;\n  padding: 20px;\n  border-radius: 30px 30px 30px 30px;\n  box-shadow: 8px 7px 2px 0 rgba(0,0,0,0.12), 7px 4px 1px -2px rgba(0,0,0,0.06), 0 1px 5px 0 rgba(0,0,0,0.12);\n}\n"}],"Page":[{"title":"关于我","date":"2023-06-07T04:34:03.000Z","_content":"\n# 关于此站\n\n是florance给写的，虽然有不知道多少的问题，但是目前能用。且基于florance的``懒惰``，大抵不会有太多再改变。\n\n也许一些算法笔记与日常会放在这里，也或许会发发电。\n\n# 关于我\n\n16岁，事学生\n\n大部分人都叫我陆田所，真名什么的，自然也不会在这里挂出来。\n\n普通的``OI``罢了\n\n# 爱好\n\n只有打游戏？（貌似）\n\n貌似所有空余时间都在打游戏？\n\n或许什么时候是该找点别的事做了\n\n\n## 除此似乎便无什么好说的了\n","source":"about/index.md","raw":"---\ntitle: 关于我\ndate: 2023-06-07 12:34:03\n---\n\n# 关于此站\n\n是florance给写的，虽然有不知道多少的问题，但是目前能用。且基于florance的``懒惰``，大抵不会有太多再改变。\n\n也许一些算法笔记与日常会放在这里，也或许会发发电。\n\n# 关于我\n\n16岁，事学生\n\n大部分人都叫我陆田所，真名什么的，自然也不会在这里挂出来。\n\n普通的``OI``罢了\n\n# 爱好\n\n只有打游戏？（貌似）\n\n貌似所有空余时间都在打游戏？\n\n或许什么时候是该找点别的事做了\n\n\n## 除此似乎便无什么好说的了\n","updated":"2023-06-07T04:58:18.877Z","path":"about/index.html","_id":"clil7y7zl0000lsufd6ux9gvj","comments":1,"layout":"page","content":"<h1 id=\"关于此站\"><a href=\"#关于此站\" class=\"headerlink\" title=\"关于此站\"></a>关于此站</h1><p>是florance给写的，虽然有不知道多少的问题，但是目前能用。且基于florance的<code>懒惰</code>，大抵不会有太多再改变。</p>\n<p>也许一些算法笔记与日常会放在这里，也或许会发发电。</p>\n<h1 id=\"关于我\"><a href=\"#关于我\" class=\"headerlink\" title=\"关于我\"></a>关于我</h1><p>16岁，事学生</p>\n<p>大部分人都叫我陆田所，真名什么的，自然也不会在这里挂出来。</p>\n<p>普通的<code>OI</code>罢了</p>\n<h1 id=\"爱好\"><a href=\"#爱好\" class=\"headerlink\" title=\"爱好\"></a>爱好</h1><p>只有打游戏？（貌似）</p>\n<p>貌似所有空余时间都在打游戏？</p>\n<p>或许什么时候是该找点别的事做了</p>\n<h2 id=\"除此似乎便无什么好说的了\"><a href=\"#除此似乎便无什么好说的了\" class=\"headerlink\" title=\"除此似乎便无什么好说的了\"></a>除此似乎便无什么好说的了</h2>","site":{"data":{}},"excerpt":"","more":"<h1 id=\"关于此站\"><a href=\"#关于此站\" class=\"headerlink\" title=\"关于此站\"></a>关于此站</h1><p>是florance给写的，虽然有不知道多少的问题，但是目前能用。且基于florance的<code>懒惰</code>，大抵不会有太多再改变。</p>\n<p>也许一些算法笔记与日常会放在这里，也或许会发发电。</p>\n<h1 id=\"关于我\"><a href=\"#关于我\" class=\"headerlink\" title=\"关于我\"></a>关于我</h1><p>16岁，事学生</p>\n<p>大部分人都叫我陆田所，真名什么的，自然也不会在这里挂出来。</p>\n<p>普通的<code>OI</code>罢了</p>\n<h1 id=\"爱好\"><a href=\"#爱好\" class=\"headerlink\" title=\"爱好\"></a>爱好</h1><p>只有打游戏？（貌似）</p>\n<p>貌似所有空余时间都在打游戏？</p>\n<p>或许什么时候是该找点别的事做了</p>\n<h2 id=\"除此似乎便无什么好说的了\"><a href=\"#除此似乎便无什么好说的了\" class=\"headerlink\" title=\"除此似乎便无什么好说的了\"></a>除此似乎便无什么好说的了</h2>"},{"title":"文章","date":"2023-06-07T04:35:44.000Z","type":"archives","_content":"","source":"archives/index.md","raw":"---\ntitle: 文章\ndate: 2023-06-07 12:35:44\ntype: archives\n---\n","updated":"2023-06-07T05:09:55.972Z","path":"archives/index.html","_id":"clil7y7zy0001lsuf0wet5ata","comments":1,"layout":"page","content":"","site":{"data":{}},"excerpt":"","more":""},{"title":"归档","date":"2023-06-07T04:35:29.000Z","type":"categories","_content":"","source":"categories/index.md","raw":"---\ntitle: 归档\ndate: 2023-06-07 12:35:29\ntype: categories\n---\n","updated":"2023-06-07T05:10:02.605Z","path":"categories/index.html","_id":"clil7y8020002lsuf66lk04n2","comments":1,"layout":"page","content":"","site":{"data":{}},"excerpt":"","more":""},{"title":"标签","date":"2023-06-07T04:34:20.000Z","type":"tags","_content":"","source":"tags/index.md","raw":"---\ntitle: 标签\ndate: 2023-06-07 12:34:20\ntype: tags\n---\n","updated":"2023-06-07T05:10:18.768Z","path":"tags/index.html","_id":"clil7y8040003lsuf4gd4dndc","comments":1,"layout":"page","content":"","site":{"data":{}},"excerpt":"","more":""}],"Post":[{"title":"Hello World","date":"2023-05-31T16:00:00.000Z","_content":"Welcome to [Hexo](https://hexo.io/)! This is your very first post. Check [documentation](https://hexo.io/docs/) for more info. If you get any problems when using Hexo, you can find the answer in [troubleshooting](https://hexo.io/docs/troubleshooting.html) or you can ask me on [GitHub](https://github.com/hexojs/hexo/issues).\n\n## Quick Start\n\n### Create a new post\n\n``` bash\n$ hexo new \"My New Post\"\n```\n\nMore info: [Writing](https://hexo.io/docs/writing.html)\n\n### Run server\n\n``` bash\n$ hexo server\n```\n\nMore info: [Server](https://hexo.io/docs/server.html)\n\n### Generate static files\n\n``` bash\n$ hexo generate\n```\n\nMore info: [Generating](https://hexo.io/docs/generating.html)\n\n### Deploy to remote sites\n\n``` bash\n$ hexo deploy\n```\n\nMore info: [Deployment](https://hexo.io/docs/one-command-deployment.html)\n","source":"_posts/hello-world.md","raw":"---\ntitle: Hello World\ndate: 2023-06-01\n---\nWelcome to [Hexo](https://hexo.io/)! This is your very first post. Check [documentation](https://hexo.io/docs/) for more info. If you get any problems when using Hexo, you can find the answer in [troubleshooting](https://hexo.io/docs/troubleshooting.html) or you can ask me on [GitHub](https://github.com/hexojs/hexo/issues).\n\n## Quick Start\n\n### Create a new post\n\n``` bash\n$ hexo new \"My New Post\"\n```\n\nMore info: [Writing](https://hexo.io/docs/writing.html)\n\n### Run server\n\n``` bash\n$ hexo server\n```\n\nMore info: [Server](https://hexo.io/docs/server.html)\n\n### Generate static files\n\n``` bash\n$ hexo generate\n```\n\nMore info: [Generating](https://hexo.io/docs/generating.html)\n\n### Deploy to remote sites\n\n``` bash\n$ hexo deploy\n```\n\nMore info: [Deployment](https://hexo.io/docs/one-command-deployment.html)\n","slug":"hello-world","published":1,"updated":"2023-06-07T05:09:46.935Z","_id":"clil7gxg10000fsuf36o6bqyp","comments":1,"layout":"post","photos":[],"link":"","content":"<p>Welcome to <a href=\"https://hexo.io/\">Hexo</a>! This is your very first post. Check <a href=\"https://hexo.io/docs/\">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href=\"https://hexo.io/docs/troubleshooting.html\">troubleshooting</a> or you can ask me on <a href=\"https://github.com/hexojs/hexo/issues\">GitHub</a>.</p>\n<h2 id=\"Quick-Start\"><a href=\"#Quick-Start\" class=\"headerlink\" title=\"Quick Start\"></a>Quick Start</h2><h3 id=\"Create-a-new-post\"><a href=\"#Create-a-new-post\" class=\"headerlink\" title=\"Create a new post\"></a>Create a new post</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo new <span class=\"string\">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure>\n\n<p>More info: <a href=\"https://hexo.io/docs/writing.html\">Writing</a></p>\n<h3 id=\"Run-server\"><a href=\"#Run-server\" class=\"headerlink\" title=\"Run server\"></a>Run server</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo server</span><br></pre></td></tr></table></figure>\n\n<p>More info: <a href=\"https://hexo.io/docs/server.html\">Server</a></p>\n<h3 id=\"Generate-static-files\"><a href=\"#Generate-static-files\" class=\"headerlink\" title=\"Generate static files\"></a>Generate static files</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo generate</span><br></pre></td></tr></table></figure>\n\n<p>More info: <a href=\"https://hexo.io/docs/generating.html\">Generating</a></p>\n<h3 id=\"Deploy-to-remote-sites\"><a href=\"#Deploy-to-remote-sites\" class=\"headerlink\" title=\"Deploy to remote sites\"></a>Deploy to remote sites</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo deploy</span><br></pre></td></tr></table></figure>\n\n<p>More info: <a href=\"https://hexo.io/docs/one-command-deployment.html\">Deployment</a></p>\n","site":{"data":{}},"excerpt":"","more":"<p>Welcome to <a href=\"https://hexo.io/\">Hexo</a>! This is your very first post. Check <a href=\"https://hexo.io/docs/\">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href=\"https://hexo.io/docs/troubleshooting.html\">troubleshooting</a> or you can ask me on <a href=\"https://github.com/hexojs/hexo/issues\">GitHub</a>.</p>\n<h2 id=\"Quick-Start\"><a href=\"#Quick-Start\" class=\"headerlink\" title=\"Quick Start\"></a>Quick Start</h2><h3 id=\"Create-a-new-post\"><a href=\"#Create-a-new-post\" class=\"headerlink\" title=\"Create a new post\"></a>Create a new post</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo new <span class=\"string\">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure>\n\n<p>More info: <a href=\"https://hexo.io/docs/writing.html\">Writing</a></p>\n<h3 id=\"Run-server\"><a href=\"#Run-server\" class=\"headerlink\" title=\"Run server\"></a>Run server</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo server</span><br></pre></td></tr></table></figure>\n\n<p>More info: <a href=\"https://hexo.io/docs/server.html\">Server</a></p>\n<h3 id=\"Generate-static-files\"><a href=\"#Generate-static-files\" class=\"headerlink\" title=\"Generate static files\"></a>Generate static files</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo generate</span><br></pre></td></tr></table></figure>\n\n<p>More info: <a href=\"https://hexo.io/docs/generating.html\">Generating</a></p>\n<h3 id=\"Deploy-to-remote-sites\"><a href=\"#Deploy-to-remote-sites\" class=\"headerlink\" title=\"Deploy to remote sites\"></a>Deploy to remote sites</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo deploy</span><br></pre></td></tr></table></figure>\n\n<p>More info: <a href=\"https://hexo.io/docs/one-command-deployment.html\">Deployment</a></p>\n"},{"title":"11","date":"2023-06-07T04:25:22.000Z","_content":"","source":"_posts/11.md","raw":"---\ntitle: 11\ndate: 2023-06-07 12:25:22\ntags:\n---\n","slug":"11","published":1,"updated":"2023-06-07T04:25:23.046Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clil7k1vm0000koufbvi73mag","content":"","site":{"data":{}},"excerpt":"","more":""},{"title":"STL天下第一！！！","date":"2023-04-30T16:00:00.000Z","_content":"\n\n\n<!-- more -->\n**STL天下第一！！！！！**   \n\n------------   \n### 与STL有关及STL中包含的数据结构都会写在此篇   \n\n### **vector(不定长数组)**  \n需调用``<vector>``头文件   \n函数   \n1. **size/empty**   \nsize函数返回vector长度，empty返回一个bool类型，表示是否为空，时间复杂度皆为O（1）。      \n\n~~其实所有STL容器都支持此操作~~   \n\n2. **clear**   \n清空数组  \n3. **迭代器**  \n可以看为STL容器的指针，可以用*解除引用。   \n一个保存``int``的``vector``的迭代器的声明方式为：  \n``vector<int>::iterator it``\nit便为迭代器，可以与其它整数相加减\n\n4. **begin/end** （左开右闭）   \nbegin返回第一个元素，end返回最后一个元素的后一位（front和back等效）   \n5. **push_back()和pop_back()**   \npush将元素插入尾部，pop将元素从头部移除   \n\n\n\n\n### **queue队列**  \n头文件为``<queue>``   \n1. 循环队列``queue``   \n``push``  \n``pop``   \n``front``   \n``back``   \n(大同小异所以不再详解)   \n2. 优先队列``priority_queue``\n``push`  \n``pop``   \n``top`` (查询堆顶元素/默认为最大值)   \n### 细谈优先队列   \n\n优先队列有三个参数，分别是要储存的数据类型，所使用容器（默认为``vector``），优先级判定（默认大根堆）。\n\n\n优先队列的优先级也是可以和``sort``一样改变的！\n\n只要在结构体中重载<运算符即可。\n~~~c++\nqueue<int> q;\nstruct rec{…}; queue<rec> q;                        //结构体rec中必须定义小于号\npriority_queue<int> q;                              // 大根堆\npriority_queue<int, vector<int>, greater<int>> q;   // 小根堆，greater是已编写好的。\npriority_queue<pair<int, int>>q;\n~~~\n\n\n ### **栈stack**  \n\n 头文件为``<stack>``   \n ``push``   \n ``pop``\n\n 无话可说  \n ###  **双端队列deque**   \n\n 头文件与queue相同 \n\n []              // 随机访问   \n``begin/end``       // 返回deque的头/尾迭代器  \n``front/back``      // 队头/队尾元素   \n``push_back``       // 从队尾入队   \n``push_front``      // 从队头入队   \n``pop_back``        // 从队尾出队   \n``pop_front``       // 从队头出队   \n``clea``r           // 清空队列  \n\n### **集合set**   \n\n头文件为``<set>``\n\n#### ``set``\n\n声明\n\n  ``set<int> s;``   \n``struct rec{…}; set<rec> s;``  // 结构体rec中必须定义小于号   \n``multiset<double> s;``\n\n1. ``size/empty/clear``    \n与vector类似，不在讲\n2. ``insert``   \n``insert(x)``将x插入到set中\n3.  ``begin/end``\n返回集合的首、尾迭代器，时间复杂度均为 O(1)O(1)。  \n``s.begin()``是指向集合中最小元素的迭代器。   \n``s.end()``是指向集合中最大元素的下一个位置的迭代器。换言之，就像``vector``一样，是一个“前闭后开”的形式。因此-- ``s.end()``是指向集合中最大元素的迭代器。\n4. ``find``\n``s.find(x)``在集合s中查找等于x的元素，并返回指向该元素的迭代器。若不存在，则返回``s.end()``。时间复杂度为 O(logn)  \n5. count\ns.count(x)返回集合s中等于x的元素个数，时间复杂度为 O(k+logn)O(k+logn)，其中 kk 为元素x的个数。\n\n### **map**  \n\n头文件为``<map>``\n\nmap容器是一个键值对key-value的映射，其内部实现是一棵以key为关键码的红黑树。Map的key和value可以是任意类型，其中key必须定义小于号运算符。\n\n``map<key_type, value_type> name;``\n\n1.  ``size/empty/clear/begin/end``\n均与set类似。\n\n2.  ``insert/erase``\n与set类似，但其参数均是pair<key_type, value_type>。\n\n3.  ``find``\nh.find(x)在变量名为h的map中查找key为x的二元组。\n\n4.  ``[]``操作符\nh[key]返回key映射的value的引用，时间复杂度为 O(logn)O(logn)。\n\n[]操作符是map最吸引人的地方。我们可以很方便地通过h[key]来得到key对应的value，还可以对h[key]进行赋值操作，改变key对应的value。\n\n\n\n \n\n\n\n\n\n\n","source":"_posts/STL.md","raw":"---\ntitle: STL天下第一！！！\ndate: 2023-5-1\ntags: STL\n---\n\n\n\n<!-- more -->\n**STL天下第一！！！！！**   \n\n------------   \n### 与STL有关及STL中包含的数据结构都会写在此篇   \n\n### **vector(不定长数组)**  \n需调用``<vector>``头文件   \n函数   \n1. **size/empty**   \nsize函数返回vector长度，empty返回一个bool类型，表示是否为空，时间复杂度皆为O（1）。      \n\n~~其实所有STL容器都支持此操作~~   \n\n2. **clear**   \n清空数组  \n3. **迭代器**  \n可以看为STL容器的指针，可以用*解除引用。   \n一个保存``int``的``vector``的迭代器的声明方式为：  \n``vector<int>::iterator it``\nit便为迭代器，可以与其它整数相加减\n\n4. **begin/end** （左开右闭）   \nbegin返回第一个元素，end返回最后一个元素的后一位（front和back等效）   \n5. **push_back()和pop_back()**   \npush将元素插入尾部，pop将元素从头部移除   \n\n\n\n\n### **queue队列**  \n头文件为``<queue>``   \n1. 循环队列``queue``   \n``push``  \n``pop``   \n``front``   \n``back``   \n(大同小异所以不再详解)   \n2. 优先队列``priority_queue``\n``push`  \n``pop``   \n``top`` (查询堆顶元素/默认为最大值)   \n### 细谈优先队列   \n\n优先队列有三个参数，分别是要储存的数据类型，所使用容器（默认为``vector``），优先级判定（默认大根堆）。\n\n\n优先队列的优先级也是可以和``sort``一样改变的！\n\n只要在结构体中重载<运算符即可。\n~~~c++\nqueue<int> q;\nstruct rec{…}; queue<rec> q;                        //结构体rec中必须定义小于号\npriority_queue<int> q;                              // 大根堆\npriority_queue<int, vector<int>, greater<int>> q;   // 小根堆，greater是已编写好的。\npriority_queue<pair<int, int>>q;\n~~~\n\n\n ### **栈stack**  \n\n 头文件为``<stack>``   \n ``push``   \n ``pop``\n\n 无话可说  \n ###  **双端队列deque**   \n\n 头文件与queue相同 \n\n []              // 随机访问   \n``begin/end``       // 返回deque的头/尾迭代器  \n``front/back``      // 队头/队尾元素   \n``push_back``       // 从队尾入队   \n``push_front``      // 从队头入队   \n``pop_back``        // 从队尾出队   \n``pop_front``       // 从队头出队   \n``clea``r           // 清空队列  \n\n### **集合set**   \n\n头文件为``<set>``\n\n#### ``set``\n\n声明\n\n  ``set<int> s;``   \n``struct rec{…}; set<rec> s;``  // 结构体rec中必须定义小于号   \n``multiset<double> s;``\n\n1. ``size/empty/clear``    \n与vector类似，不在讲\n2. ``insert``   \n``insert(x)``将x插入到set中\n3.  ``begin/end``\n返回集合的首、尾迭代器，时间复杂度均为 O(1)O(1)。  \n``s.begin()``是指向集合中最小元素的迭代器。   \n``s.end()``是指向集合中最大元素的下一个位置的迭代器。换言之，就像``vector``一样，是一个“前闭后开”的形式。因此-- ``s.end()``是指向集合中最大元素的迭代器。\n4. ``find``\n``s.find(x)``在集合s中查找等于x的元素，并返回指向该元素的迭代器。若不存在，则返回``s.end()``。时间复杂度为 O(logn)  \n5. count\ns.count(x)返回集合s中等于x的元素个数，时间复杂度为 O(k+logn)O(k+logn)，其中 kk 为元素x的个数。\n\n### **map**  \n\n头文件为``<map>``\n\nmap容器是一个键值对key-value的映射，其内部实现是一棵以key为关键码的红黑树。Map的key和value可以是任意类型，其中key必须定义小于号运算符。\n\n``map<key_type, value_type> name;``\n\n1.  ``size/empty/clear/begin/end``\n均与set类似。\n\n2.  ``insert/erase``\n与set类似，但其参数均是pair<key_type, value_type>。\n\n3.  ``find``\nh.find(x)在变量名为h的map中查找key为x的二元组。\n\n4.  ``[]``操作符\nh[key]返回key映射的value的引用，时间复杂度为 O(logn)O(logn)。\n\n[]操作符是map最吸引人的地方。我们可以很方便地通过h[key]来得到key对应的value，还可以对h[key]进行赋值操作，改变key对应的value。\n\n\n\n \n\n\n\n\n\n\n","slug":"STL","published":1,"updated":"2023-06-07T04:55:42.066Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clilg6rfz0000wsuf61z1hw73","content":"<span id=\"more\"></span>\n<p><strong>STL天下第一！！！！！</strong>   </p>\n<hr>\n<h3 id=\"与STL有关及STL中包含的数据结构都会写在此篇\"><a href=\"#与STL有关及STL中包含的数据结构都会写在此篇\" class=\"headerlink\" title=\"与STL有关及STL中包含的数据结构都会写在此篇\"></a>与STL有关及STL中包含的数据结构都会写在此篇</h3><h3 id=\"vector-不定长数组\"><a href=\"#vector-不定长数组\" class=\"headerlink\" title=\"vector(不定长数组)\"></a><strong>vector(不定长数组)</strong></h3><p>需调用<code>&lt;vector&gt;</code>头文件<br>函数   </p>\n<ol>\n<li><strong>size&#x2F;empty</strong><br>size函数返回vector长度，empty返回一个bool类型，表示是否为空，时间复杂度皆为O（1）。</li>\n</ol>\n<p><del>其实所有STL容器都支持此操作</del>   </p>\n<ol start=\"2\">\n<li><p><strong>clear</strong><br>清空数组  </p>\n</li>\n<li><p><strong>迭代器</strong><br>可以看为STL容器的指针，可以用*解除引用。<br>一个保存<code>int</code>的<code>vector</code>的迭代器的声明方式为：<br><code>vector&lt;int&gt;::iterator it</code><br>it便为迭代器，可以与其它整数相加减</p>\n</li>\n<li><p><strong>begin&#x2F;end</strong> （左开右闭）<br>begin返回第一个元素，end返回最后一个元素的后一位（front和back等效）   </p>\n</li>\n<li><p><strong>push_back()和pop_back()</strong><br>push将元素插入尾部，pop将元素从头部移除</p>\n</li>\n</ol>\n<h3 id=\"queue队列\"><a href=\"#queue队列\" class=\"headerlink\" title=\"queue队列\"></a><strong>queue队列</strong></h3><p>头文件为<code>&lt;queue&gt;</code>   </p>\n<ol>\n<li>循环队列<code>queue</code><br><code>push</code><br><code>pop</code><br><code>front</code><br><code>back</code><br>(大同小异所以不再详解)   </li>\n<li>优先队列<code>priority_queue</code><br><code>push`   </code>pop<code>    </code>top&#96;&#96; (查询堆顶元素&#x2F;默认为最大值)</li>\n</ol>\n<h3 id=\"细谈优先队列\"><a href=\"#细谈优先队列\" class=\"headerlink\" title=\"细谈优先队列\"></a>细谈优先队列</h3><p>优先队列有三个参数，分别是要储存的数据类型，所使用容器（默认为<code>vector</code>），优先级判定（默认大根堆）。</p>\n<p>优先队列的优先级也是可以和<code>sort</code>一样改变的！</p>\n<p>只要在结构体中重载&lt;运算符即可。</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">queue&lt;<span class=\"type\">int</span>&gt; q;</span><br><span class=\"line\"><span class=\"keyword\">struct</span> <span class=\"title class_\">rec</span>&#123;…&#125;; queue&lt;rec&gt; q;                        <span class=\"comment\">//结构体rec中必须定义小于号</span></span><br><span class=\"line\">priority_queue&lt;<span class=\"type\">int</span>&gt; q;                              <span class=\"comment\">// 大根堆</span></span><br><span class=\"line\">priority_queue&lt;<span class=\"type\">int</span>, vector&lt;<span class=\"type\">int</span>&gt;, greater&lt;<span class=\"type\">int</span>&gt;&gt; q;   <span class=\"comment\">// 小根堆，greater是已编写好的。</span></span><br><span class=\"line\">priority_queue&lt;pair&lt;<span class=\"type\">int</span>, <span class=\"type\">int</span>&gt;&gt;q;</span><br></pre></td></tr></table></figure>\n\n\n<h3 id=\"栈stack\"><a href=\"#栈stack\" class=\"headerlink\" title=\"栈stack\"></a><strong>栈stack</strong></h3><p> 头文件为<code>&lt;stack&gt;</code><br> <code>push</code><br> <code>pop</code></p>\n<p> 无话可说  </p>\n<h3 id=\"双端队列deque\"><a href=\"#双端队列deque\" class=\"headerlink\" title=\"双端队列deque\"></a><strong>双端队列deque</strong></h3><p> 头文件与queue相同 </p>\n<p> []              &#x2F;&#x2F; 随机访问<br><code>begin/end</code>       &#x2F;&#x2F; 返回deque的头&#x2F;尾迭代器<br><code>front/back</code>      &#x2F;&#x2F; 队头&#x2F;队尾元素<br><code>push_back</code>       &#x2F;&#x2F; 从队尾入队<br><code>push_front</code>      &#x2F;&#x2F; 从队头入队<br><code>pop_back</code>        &#x2F;&#x2F; 从队尾出队<br><code>pop_front</code>       &#x2F;&#x2F; 从队头出队<br><code>clea</code>r           &#x2F;&#x2F; 清空队列  </p>\n<h3 id=\"集合set\"><a href=\"#集合set\" class=\"headerlink\" title=\"集合set\"></a><strong>集合set</strong></h3><p>头文件为<code>&lt;set&gt;</code></p>\n<h4 id=\"set\"><a href=\"#set\" class=\"headerlink\" title=\"set\"></a><code>set</code></h4><p>声明</p>\n<p>  <code>set&lt;int&gt; s;</code><br><code>struct rec&#123;…&#125;; set&lt;rec&gt; s;</code>  &#x2F;&#x2F; 结构体rec中必须定义小于号<br><code>multiset&lt;double&gt; s;</code></p>\n<ol>\n<li><code>size/empty/clear</code><br>与vector类似，不在讲</li>\n<li><code>insert</code><br><code>insert(x)</code>将x插入到set中</li>\n<li><code>begin/end</code><br>返回集合的首、尾迭代器，时间复杂度均为 O(1)O(1)。<br><code>s.begin()</code>是指向集合中最小元素的迭代器。<br><code>s.end()</code>是指向集合中最大元素的下一个位置的迭代器。换言之，就像<code>vector</code>一样，是一个“前闭后开”的形式。因此– <code>s.end()</code>是指向集合中最大元素的迭代器。</li>\n<li><code>find</code><br><code>s.find(x)</code>在集合s中查找等于x的元素，并返回指向该元素的迭代器。若不存在，则返回<code>s.end()</code>。时间复杂度为 O(logn)  </li>\n<li>count<br>s.count(x)返回集合s中等于x的元素个数，时间复杂度为 O(k+logn)O(k+logn)，其中 kk 为元素x的个数。</li>\n</ol>\n<h3 id=\"map\"><a href=\"#map\" class=\"headerlink\" title=\"map\"></a><strong>map</strong></h3><p>头文件为<code>&lt;map&gt;</code></p>\n<p>map容器是一个键值对key-value的映射，其内部实现是一棵以key为关键码的红黑树。Map的key和value可以是任意类型，其中key必须定义小于号运算符。</p>\n<p><code>map&lt;key_type, value_type&gt; name;</code></p>\n<ol>\n<li><p><code>size/empty/clear/begin/end</code><br>均与set类似。</p>\n</li>\n<li><p><code>insert/erase</code><br>与set类似，但其参数均是pair&lt;key_type, value_type&gt;。</p>\n</li>\n<li><p><code>find</code><br>h.find(x)在变量名为h的map中查找key为x的二元组。</p>\n</li>\n<li><p><code>[]</code>操作符<br>h[key]返回key映射的value的引用，时间复杂度为 O(logn)O(logn)。</p>\n</li>\n</ol>\n<p>[]操作符是map最吸引人的地方。我们可以很方便地通过h[key]来得到key对应的value，还可以对h[key]进行赋值操作，改变key对应的value。</p>\n","site":{"data":{}},"excerpt":"","more":"<p><strong>STL天下第一！！！！！</strong>   </p>\n<hr>\n<h3 id=\"与STL有关及STL中包含的数据结构都会写在此篇\"><a href=\"#与STL有关及STL中包含的数据结构都会写在此篇\" class=\"headerlink\" title=\"与STL有关及STL中包含的数据结构都会写在此篇\"></a>与STL有关及STL中包含的数据结构都会写在此篇</h3><h3 id=\"vector-不定长数组\"><a href=\"#vector-不定长数组\" class=\"headerlink\" title=\"vector(不定长数组)\"></a><strong>vector(不定长数组)</strong></h3><p>需调用<code>&lt;vector&gt;</code>头文件<br>函数   </p>\n<ol>\n<li><strong>size&#x2F;empty</strong><br>size函数返回vector长度，empty返回一个bool类型，表示是否为空，时间复杂度皆为O（1）。</li>\n</ol>\n<p><del>其实所有STL容器都支持此操作</del>   </p>\n<ol start=\"2\">\n<li><p><strong>clear</strong><br>清空数组  </p>\n</li>\n<li><p><strong>迭代器</strong><br>可以看为STL容器的指针，可以用*解除引用。<br>一个保存<code>int</code>的<code>vector</code>的迭代器的声明方式为：<br><code>vector&lt;int&gt;::iterator it</code><br>it便为迭代器，可以与其它整数相加减</p>\n</li>\n<li><p><strong>begin&#x2F;end</strong> （左开右闭）<br>begin返回第一个元素，end返回最后一个元素的后一位（front和back等效）   </p>\n</li>\n<li><p><strong>push_back()和pop_back()</strong><br>push将元素插入尾部，pop将元素从头部移除</p>\n</li>\n</ol>\n<h3 id=\"queue队列\"><a href=\"#queue队列\" class=\"headerlink\" title=\"queue队列\"></a><strong>queue队列</strong></h3><p>头文件为<code>&lt;queue&gt;</code>   </p>\n<ol>\n<li>循环队列<code>queue</code><br><code>push</code><br><code>pop</code><br><code>front</code><br><code>back</code><br>(大同小异所以不再详解)   </li>\n<li>优先队列<code>priority_queue</code><br><code>push`   </code>pop<code>    </code>top&#96;&#96; (查询堆顶元素&#x2F;默认为最大值)</li>\n</ol>\n<h3 id=\"细谈优先队列\"><a href=\"#细谈优先队列\" class=\"headerlink\" title=\"细谈优先队列\"></a>细谈优先队列</h3><p>优先队列有三个参数，分别是要储存的数据类型，所使用容器（默认为<code>vector</code>），优先级判定（默认大根堆）。</p>\n<p>优先队列的优先级也是可以和<code>sort</code>一样改变的！</p>\n<p>只要在结构体中重载&lt;运算符即可。</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">queue&lt;<span class=\"type\">int</span>&gt; q;</span><br><span class=\"line\"><span class=\"keyword\">struct</span> <span class=\"title class_\">rec</span>&#123;…&#125;; queue&lt;rec&gt; q;                        <span class=\"comment\">//结构体rec中必须定义小于号</span></span><br><span class=\"line\">priority_queue&lt;<span class=\"type\">int</span>&gt; q;                              <span class=\"comment\">// 大根堆</span></span><br><span class=\"line\">priority_queue&lt;<span class=\"type\">int</span>, vector&lt;<span class=\"type\">int</span>&gt;, greater&lt;<span class=\"type\">int</span>&gt;&gt; q;   <span class=\"comment\">// 小根堆，greater是已编写好的。</span></span><br><span class=\"line\">priority_queue&lt;pair&lt;<span class=\"type\">int</span>, <span class=\"type\">int</span>&gt;&gt;q;</span><br></pre></td></tr></table></figure>\n\n\n<h3 id=\"栈stack\"><a href=\"#栈stack\" class=\"headerlink\" title=\"栈stack\"></a><strong>栈stack</strong></h3><p> 头文件为<code>&lt;stack&gt;</code><br> <code>push</code><br> <code>pop</code></p>\n<p> 无话可说  </p>\n<h3 id=\"双端队列deque\"><a href=\"#双端队列deque\" class=\"headerlink\" title=\"双端队列deque\"></a><strong>双端队列deque</strong></h3><p> 头文件与queue相同 </p>\n<p> []              &#x2F;&#x2F; 随机访问<br><code>begin/end</code>       &#x2F;&#x2F; 返回deque的头&#x2F;尾迭代器<br><code>front/back</code>      &#x2F;&#x2F; 队头&#x2F;队尾元素<br><code>push_back</code>       &#x2F;&#x2F; 从队尾入队<br><code>push_front</code>      &#x2F;&#x2F; 从队头入队<br><code>pop_back</code>        &#x2F;&#x2F; 从队尾出队<br><code>pop_front</code>       &#x2F;&#x2F; 从队头出队<br><code>clea</code>r           &#x2F;&#x2F; 清空队列  </p>\n<h3 id=\"集合set\"><a href=\"#集合set\" class=\"headerlink\" title=\"集合set\"></a><strong>集合set</strong></h3><p>头文件为<code>&lt;set&gt;</code></p>\n<h4 id=\"set\"><a href=\"#set\" class=\"headerlink\" title=\"set\"></a><code>set</code></h4><p>声明</p>\n<p>  <code>set&lt;int&gt; s;</code><br><code>struct rec&#123;…&#125;; set&lt;rec&gt; s;</code>  &#x2F;&#x2F; 结构体rec中必须定义小于号<br><code>multiset&lt;double&gt; s;</code></p>\n<ol>\n<li><code>size/empty/clear</code><br>与vector类似，不在讲</li>\n<li><code>insert</code><br><code>insert(x)</code>将x插入到set中</li>\n<li><code>begin/end</code><br>返回集合的首、尾迭代器，时间复杂度均为 O(1)O(1)。<br><code>s.begin()</code>是指向集合中最小元素的迭代器。<br><code>s.end()</code>是指向集合中最大元素的下一个位置的迭代器。换言之，就像<code>vector</code>一样，是一个“前闭后开”的形式。因此– <code>s.end()</code>是指向集合中最大元素的迭代器。</li>\n<li><code>find</code><br><code>s.find(x)</code>在集合s中查找等于x的元素，并返回指向该元素的迭代器。若不存在，则返回<code>s.end()</code>。时间复杂度为 O(logn)  </li>\n<li>count<br>s.count(x)返回集合s中等于x的元素个数，时间复杂度为 O(k+logn)O(k+logn)，其中 kk 为元素x的个数。</li>\n</ol>\n<h3 id=\"map\"><a href=\"#map\" class=\"headerlink\" title=\"map\"></a><strong>map</strong></h3><p>头文件为<code>&lt;map&gt;</code></p>\n<p>map容器是一个键值对key-value的映射，其内部实现是一棵以key为关键码的红黑树。Map的key和value可以是任意类型，其中key必须定义小于号运算符。</p>\n<p><code>map&lt;key_type, value_type&gt; name;</code></p>\n<ol>\n<li><p><code>size/empty/clear/begin/end</code><br>均与set类似。</p>\n</li>\n<li><p><code>insert/erase</code><br>与set类似，但其参数均是pair&lt;key_type, value_type&gt;。</p>\n</li>\n<li><p><code>find</code><br>h.find(x)在变量名为h的map中查找key为x的二元组。</p>\n</li>\n<li><p><code>[]</code>操作符<br>h[key]返回key映射的value的引用，时间复杂度为 O(logn)O(logn)。</p>\n</li>\n</ol>\n<p>[]操作符是map最吸引人的地方。我们可以很方便地通过h[key]来得到key对应的value，还可以对h[key]进行赋值操作，改变key对应的value。</p>"},{"title":"encrypt","date":"2023-05-27T05:30:34.000Z","description":"密码是encrypt","password":"encrypt","message":"密码是encrypt.","_content":"要加密就写 password: \n在文章头下面写这些东西(看着加)\nabstract: 文章已加密\nmessage: 请输入密码\nwrong_pass_message: 密码错误\nwrong_hash_message: 文章校验失败","source":"_posts/encrypt.md","raw":"---\ntitle: encrypt\ndate: 2023-05-27 13:30:34\ntags: encrypt\ndescription: 密码是encrypt\npassword: encrypt\nmessage: 密码是encrypt.\n---\n要加密就写 password: \n在文章头下面写这些东西(看着加)\nabstract: 文章已加密\nmessage: 请输入密码\nwrong_pass_message: 密码错误\nwrong_hash_message: 文章校验失败","slug":"encrypt","published":1,"updated":"2023-06-07T04:56:03.383Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clilg6rge0001wsuf8fmx5hst","content":"<p>要加密就写 password:<br>在文章头下面写这些东西(看着加)<br>abstract: 文章已加密<br>message: 请输入密码<br>wrong_pass_message: 密码错误<br>wrong_hash_message: 文章校验失败</p>\n","site":{"data":{}},"excerpt":"","more":"<p>要加密就写 password:<br>在文章头下面写这些东西(看着加)<br>abstract: 文章已加密<br>message: 请输入密码<br>wrong_pass_message: 密码错误<br>wrong_hash_message: 文章校验失败</p>\n"},{"title":"前缀和与差分","date":"2023-05-22T16:00:00.000Z","_content":"其实并不是很难的东西，只是怕又忘记了所以才写博客。\n\n## 前缀和 \n\n构造``数组b``为输入``数组a``的前缀和，输出一段数列的和时时间复杂度为O（1），适合大量的输出。\n\n### 一维前缀和\n\n\n***[模板题](https://www.acwing.com/problem/content/797/)***\n\n显然无什么好说的\n\n\n在输入时``b[i] = b[i - 1] + a[i]``以构造***前缀和数组***即可  \n\n代码如下\n\n```c++\n#include <bits/stdc++.h>\n\nusing namespace std;\nconst int lxb = 1e5 + 10;\nint q[lxb];\nint n, m;\nint main()\n{\n\tcin >> n >> m;\n\tfor(int i = 1; i <= n; i ++)\n\t{\n\t\tint x; \n\t\tcin >> x;\n\t\tq[i] = q[i - 1] + x;\n\t}\n\tfor(int i = 1; i <= m; i ++)\n\t{\n\t\tint l, r;\n\t\tcin >> l >> r;\n\t\tcout << q[r] - q[l - 1] << endl;\n\t}\n\n\treturn 0;\n}\n```\n\n### 二维前缀和\n\n***[模板题](https://www.acwing.com/problem/content/798/)***\n\n其实本质上差别不大\n\n简单推理便可以得到x1,y1,x2,y2区间查询的和为\n\n``s[x2][y2] - s[x1 - 1][y2] - s[x2][y1 - 1] + s[x1 - 1][y1 - 1]``\n\n代码如下\n~~~c++\n#include <bits/stdc++.h>\n\nusing namespace std;\n\nconst int lxb = 1010;\nint a[lxb][lxb],s[lxb][lxb];\nint n, m, q;\n\nint main()\n{\n\tcin >> n >> m >> q;\n\tfor(int i = 1; i <= n; i ++)\n\t{\n\t\tfor(int j = 1; j  <= m; j ++)\n\t\t{\n\t\t\tscanf(\"%d\",&a[i][j]);\n\t\t\ts[i][j] = s[i][j - 1] + s[i - 1][j] - s[i - 1][j - 1] + a[i][j];\n\n\t\t}\n\t}\n\twhile(q --)\n\t{\n\t\tint x1, y1, x2, y2;\n\t\tscanf(\"%d%d%d%d\", &x1, &y1, &x2, &y2);\n\t\tint ans = s[x2][y2] - s[x1 -1][y2] - s[x2][y1 -1] + s[x1 -1][y1 -1];\n\t\tcout << ans << endl;\n\t}\n\treturn 0;\n}\n~~~\n\n## 差分\n\n差分便是构造的``b数组``的前缀和为``输入数组a``的前缀和，改变一个区间数据的时间复杂度为O（1），适合频繁插入数据。\n\n自己一般会理解为反向前缀和\n\n### 一维差分\n\n[模板题](https://www.acwing.com/problem/content/799/)\n\n无话可说\n\n~~~c++\n#include <iostream>\n\nusing namespace std;\n\nconst int N = 100010;\n\nint n, m;\nint a[N], b[N];\n\nvoid insert(int l, int r, int c)\n{\n    b[l] += c;\n    b[r + 1] -= c;\n}\n\nint main()\n{\n    scanf(\"%d%d\", &n, &m);\n    for (int i = 1; i <= n; i ++ ) scanf(\"%d\", &a[i]);\n\n    for (int i = 1; i <= n; i ++ ) insert(i, i, a[i]);\n\n    while (m -- )\n    {\n        int l, r, c;\n        scanf(\"%d%d%d\", &l, &r, &c);\n        insert(l, r, c);\n    }\n\n    for (int i = 1; i <= n; i ++ ) b[i] += b[i - 1];\n\n    for (int i = 1; i <= n; i ++ ) printf(\"%d \", b[i]);\n\n    return 0;\n}\n\n~~~\n\n### 二维差分\n\n其实也是一样的道理，简单推理便可以得到\n\n若想使``x1,y1,x2,y2``区间的数都加上加上一个c\n\n只需要对``b数组``做以下操作\n\n***b[x1][y1] += c***\n\n***b[x1][y2 + 1] -= c***\n\n***b[x2 + 1][y1], -= c***\n\n***b[x2 + 1][y2 + 1] += c***   \n\n\n[模板题](https://www.acwing.com/activity/content/problem/content/832/)\n\n代码如下\n\n~~~c++\n\n#include <bits/stdc++.h>\n\nusing namespace std;\n\nconst int lxb = 1e3 + 10;\n\nint n, m, q;\n\nint a[lxb][lxb], b[lxb][lxb];\n\nvoid insert (int x1, int y1, int x2, int y2, int c)\n{\n    b[x1][y1] += c;\n    b[x1][y2 + 1] -= c;\n    b[x2 + 1][y1] -= c;\n    b[x2 +1][y2 + 1] += c;\n}\n\nint main()\n{\ncin >> n >> m >> q;\n\nfor(int i = 1; i <= n; i ++)\n    for(int j = 1; j <= m; j ++)\n    {\n        scanf(\"%d\",&a[i][j]);\n    }\n    for(int i = 1; i <= n; i ++)\n        for(int j = 1; j <= m; j ++)\n        {\n            insert(i,j,i,j,a[i][j]);\n        }\n\nwhile(q --)\n{\n    int x1,y1,x2,y2,c;\n    cin >> x1 >> y1 >> x2 >> y2 >> c;\n    insert(x1,y1,x2,y2,c);\n}\nfor(int i = 1; i <= n; i ++)\n{\n    for(int j = 1; j <= m; j ++)\n    {\n        b[i][j] += b[i - 1][j] + b[i][j - 1] - b[i -1][j - 1];\n    }\n}\n\nfor(int i = 1; i <= n; i ++)\n    {\n    for(int j = 1; j <= m; j ++)\n        {\n            printf(\"%d \",b[i][j]);\n        }\n    puts(\" \");\n    }\n    return 0;\n}\n\n\n~~~\n","source":"_posts/前缀和与差分.md","raw":"---\ntitle: 前缀和与差分\ndate: 2023-05-23\ntags: 算法\n---\n其实并不是很难的东西，只是怕又忘记了所以才写博客。\n\n## 前缀和 \n\n构造``数组b``为输入``数组a``的前缀和，输出一段数列的和时时间复杂度为O（1），适合大量的输出。\n\n### 一维前缀和\n\n\n***[模板题](https://www.acwing.com/problem/content/797/)***\n\n显然无什么好说的\n\n\n在输入时``b[i] = b[i - 1] + a[i]``以构造***前缀和数组***即可  \n\n代码如下\n\n```c++\n#include <bits/stdc++.h>\n\nusing namespace std;\nconst int lxb = 1e5 + 10;\nint q[lxb];\nint n, m;\nint main()\n{\n\tcin >> n >> m;\n\tfor(int i = 1; i <= n; i ++)\n\t{\n\t\tint x; \n\t\tcin >> x;\n\t\tq[i] = q[i - 1] + x;\n\t}\n\tfor(int i = 1; i <= m; i ++)\n\t{\n\t\tint l, r;\n\t\tcin >> l >> r;\n\t\tcout << q[r] - q[l - 1] << endl;\n\t}\n\n\treturn 0;\n}\n```\n\n### 二维前缀和\n\n***[模板题](https://www.acwing.com/problem/content/798/)***\n\n其实本质上差别不大\n\n简单推理便可以得到x1,y1,x2,y2区间查询的和为\n\n``s[x2][y2] - s[x1 - 1][y2] - s[x2][y1 - 1] + s[x1 - 1][y1 - 1]``\n\n代码如下\n~~~c++\n#include <bits/stdc++.h>\n\nusing namespace std;\n\nconst int lxb = 1010;\nint a[lxb][lxb],s[lxb][lxb];\nint n, m, q;\n\nint main()\n{\n\tcin >> n >> m >> q;\n\tfor(int i = 1; i <= n; i ++)\n\t{\n\t\tfor(int j = 1; j  <= m; j ++)\n\t\t{\n\t\t\tscanf(\"%d\",&a[i][j]);\n\t\t\ts[i][j] = s[i][j - 1] + s[i - 1][j] - s[i - 1][j - 1] + a[i][j];\n\n\t\t}\n\t}\n\twhile(q --)\n\t{\n\t\tint x1, y1, x2, y2;\n\t\tscanf(\"%d%d%d%d\", &x1, &y1, &x2, &y2);\n\t\tint ans = s[x2][y2] - s[x1 -1][y2] - s[x2][y1 -1] + s[x1 -1][y1 -1];\n\t\tcout << ans << endl;\n\t}\n\treturn 0;\n}\n~~~\n\n## 差分\n\n差分便是构造的``b数组``的前缀和为``输入数组a``的前缀和，改变一个区间数据的时间复杂度为O（1），适合频繁插入数据。\n\n自己一般会理解为反向前缀和\n\n### 一维差分\n\n[模板题](https://www.acwing.com/problem/content/799/)\n\n无话可说\n\n~~~c++\n#include <iostream>\n\nusing namespace std;\n\nconst int N = 100010;\n\nint n, m;\nint a[N], b[N];\n\nvoid insert(int l, int r, int c)\n{\n    b[l] += c;\n    b[r + 1] -= c;\n}\n\nint main()\n{\n    scanf(\"%d%d\", &n, &m);\n    for (int i = 1; i <= n; i ++ ) scanf(\"%d\", &a[i]);\n\n    for (int i = 1; i <= n; i ++ ) insert(i, i, a[i]);\n\n    while (m -- )\n    {\n        int l, r, c;\n        scanf(\"%d%d%d\", &l, &r, &c);\n        insert(l, r, c);\n    }\n\n    for (int i = 1; i <= n; i ++ ) b[i] += b[i - 1];\n\n    for (int i = 1; i <= n; i ++ ) printf(\"%d \", b[i]);\n\n    return 0;\n}\n\n~~~\n\n### 二维差分\n\n其实也是一样的道理，简单推理便可以得到\n\n若想使``x1,y1,x2,y2``区间的数都加上加上一个c\n\n只需要对``b数组``做以下操作\n\n***b[x1][y1] += c***\n\n***b[x1][y2 + 1] -= c***\n\n***b[x2 + 1][y1], -= c***\n\n***b[x2 + 1][y2 + 1] += c***   \n\n\n[模板题](https://www.acwing.com/activity/content/problem/content/832/)\n\n代码如下\n\n~~~c++\n\n#include <bits/stdc++.h>\n\nusing namespace std;\n\nconst int lxb = 1e3 + 10;\n\nint n, m, q;\n\nint a[lxb][lxb], b[lxb][lxb];\n\nvoid insert (int x1, int y1, int x2, int y2, int c)\n{\n    b[x1][y1] += c;\n    b[x1][y2 + 1] -= c;\n    b[x2 + 1][y1] -= c;\n    b[x2 +1][y2 + 1] += c;\n}\n\nint main()\n{\ncin >> n >> m >> q;\n\nfor(int i = 1; i <= n; i ++)\n    for(int j = 1; j <= m; j ++)\n    {\n        scanf(\"%d\",&a[i][j]);\n    }\n    for(int i = 1; i <= n; i ++)\n        for(int j = 1; j <= m; j ++)\n        {\n            insert(i,j,i,j,a[i][j]);\n        }\n\nwhile(q --)\n{\n    int x1,y1,x2,y2,c;\n    cin >> x1 >> y1 >> x2 >> y2 >> c;\n    insert(x1,y1,x2,y2,c);\n}\nfor(int i = 1; i <= n; i ++)\n{\n    for(int j = 1; j <= m; j ++)\n    {\n        b[i][j] += b[i - 1][j] + b[i][j - 1] - b[i -1][j - 1];\n    }\n}\n\nfor(int i = 1; i <= n; i ++)\n    {\n    for(int j = 1; j <= m; j ++)\n        {\n            printf(\"%d \",b[i][j]);\n        }\n    puts(\" \");\n    }\n    return 0;\n}\n\n\n~~~\n","slug":"前缀和与差分","published":1,"updated":"2023-06-07T04:56:17.537Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clilg6rh30003wsufdyrig08a","content":"<p>其实并不是很难的东西，只是怕又忘记了所以才写博客。</p>\n<h2 id=\"前缀和\"><a href=\"#前缀和\" class=\"headerlink\" title=\"前缀和\"></a>前缀和</h2><p>构造<code>数组b</code>为输入<code>数组a</code>的前缀和，输出一段数列的和时时间复杂度为O（1），适合大量的输出。</p>\n<h3 id=\"一维前缀和\"><a href=\"#一维前缀和\" class=\"headerlink\" title=\"一维前缀和\"></a>一维前缀和</h3><p><em><strong><a href=\"https://www.acwing.com/problem/content/797/\">模板题</a></strong></em></p>\n<p>显然无什么好说的</p>\n<p>在输入时<code>b[i] = b[i - 1] + a[i]</code>以构造<em><strong>前缀和数组</strong></em>即可  </p>\n<p>代码如下</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;bits/stdc++.h&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std;</span><br><span class=\"line\"><span class=\"type\">const</span> <span class=\"type\">int</span> lxb = <span class=\"number\">1e5</span> + <span class=\"number\">10</span>;</span><br><span class=\"line\"><span class=\"type\">int</span> q[lxb];</span><br><span class=\"line\"><span class=\"type\">int</span> n, m;</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">\tcin &gt;&gt; n &gt;&gt; m;</span><br><span class=\"line\">\t<span class=\"keyword\">for</span>(<span class=\"type\">int</span> i = <span class=\"number\">1</span>; i &lt;= n; i ++)</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\t<span class=\"type\">int</span> x; </span><br><span class=\"line\">\t\tcin &gt;&gt; x;</span><br><span class=\"line\">\t\tq[i] = q[i - <span class=\"number\">1</span>] + x;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">for</span>(<span class=\"type\">int</span> i = <span class=\"number\">1</span>; i &lt;= m; i ++)</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\t<span class=\"type\">int</span> l, r;</span><br><span class=\"line\">\t\tcin &gt;&gt; l &gt;&gt; r;</span><br><span class=\"line\">\t\tcout &lt;&lt; q[r] - q[l - <span class=\"number\">1</span>] &lt;&lt; endl;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"二维前缀和\"><a href=\"#二维前缀和\" class=\"headerlink\" title=\"二维前缀和\"></a>二维前缀和</h3><p><em><strong><a href=\"https://www.acwing.com/problem/content/798/\">模板题</a></strong></em></p>\n<p>其实本质上差别不大</p>\n<p>简单推理便可以得到x1,y1,x2,y2区间查询的和为</p>\n<p><code>s[x2][y2] - s[x1 - 1][y2] - s[x2][y1 - 1] + s[x1 - 1][y1 - 1]</code></p>\n<p>代码如下</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;bits/stdc++.h&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"type\">const</span> <span class=\"type\">int</span> lxb = <span class=\"number\">1010</span>;</span><br><span class=\"line\"><span class=\"type\">int</span> a[lxb][lxb],s[lxb][lxb];</span><br><span class=\"line\"><span class=\"type\">int</span> n, m, q;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">\tcin &gt;&gt; n &gt;&gt; m &gt;&gt; q;</span><br><span class=\"line\">\t<span class=\"keyword\">for</span>(<span class=\"type\">int</span> i = <span class=\"number\">1</span>; i &lt;= n; i ++)</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">for</span>(<span class=\"type\">int</span> j = <span class=\"number\">1</span>; j  &lt;= m; j ++)</span><br><span class=\"line\">\t\t&#123;</span><br><span class=\"line\">\t\t\t<span class=\"built_in\">scanf</span>(<span class=\"string\">&quot;%d&quot;</span>,&amp;a[i][j]);</span><br><span class=\"line\">\t\t\ts[i][j] = s[i][j - <span class=\"number\">1</span>] + s[i - <span class=\"number\">1</span>][j] - s[i - <span class=\"number\">1</span>][j - <span class=\"number\">1</span>] + a[i][j];</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">while</span>(q --)</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\t<span class=\"type\">int</span> x1, y1, x2, y2;</span><br><span class=\"line\">\t\t<span class=\"built_in\">scanf</span>(<span class=\"string\">&quot;%d%d%d%d&quot;</span>, &amp;x1, &amp;y1, &amp;x2, &amp;y2);</span><br><span class=\"line\">\t\t<span class=\"type\">int</span> ans = s[x2][y2] - s[x1 <span class=\"number\">-1</span>][y2] - s[x2][y1 <span class=\"number\">-1</span>] + s[x1 <span class=\"number\">-1</span>][y1 <span class=\"number\">-1</span>];</span><br><span class=\"line\">\t\tcout &lt;&lt; ans &lt;&lt; endl;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"差分\"><a href=\"#差分\" class=\"headerlink\" title=\"差分\"></a>差分</h2><p>差分便是构造的<code>b数组</code>的前缀和为<code>输入数组a</code>的前缀和，改变一个区间数据的时间复杂度为O（1），适合频繁插入数据。</p>\n<p>自己一般会理解为反向前缀和</p>\n<h3 id=\"一维差分\"><a href=\"#一维差分\" class=\"headerlink\" title=\"一维差分\"></a>一维差分</h3><p><a href=\"https://www.acwing.com/problem/content/799/\">模板题</a></p>\n<p>无话可说</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"type\">const</span> <span class=\"type\">int</span> N = <span class=\"number\">100010</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"type\">int</span> n, m;</span><br><span class=\"line\"><span class=\"type\">int</span> a[N], b[N];</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">insert</span><span class=\"params\">(<span class=\"type\">int</span> l, <span class=\"type\">int</span> r, <span class=\"type\">int</span> c)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    b[l] += c;</span><br><span class=\"line\">    b[r + <span class=\"number\">1</span>] -= c;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">scanf</span>(<span class=\"string\">&quot;%d%d&quot;</span>, &amp;n, &amp;m);</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"type\">int</span> i = <span class=\"number\">1</span>; i &lt;= n; i ++ ) <span class=\"built_in\">scanf</span>(<span class=\"string\">&quot;%d&quot;</span>, &amp;a[i]);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"type\">int</span> i = <span class=\"number\">1</span>; i &lt;= n; i ++ ) <span class=\"built_in\">insert</span>(i, i, a[i]);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">while</span> (m -- )</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"type\">int</span> l, r, c;</span><br><span class=\"line\">        <span class=\"built_in\">scanf</span>(<span class=\"string\">&quot;%d%d%d&quot;</span>, &amp;l, &amp;r, &amp;c);</span><br><span class=\"line\">        <span class=\"built_in\">insert</span>(l, r, c);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"type\">int</span> i = <span class=\"number\">1</span>; i &lt;= n; i ++ ) b[i] += b[i - <span class=\"number\">1</span>];</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"type\">int</span> i = <span class=\"number\">1</span>; i &lt;= n; i ++ ) <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;%d &quot;</span>, b[i]);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"二维差分\"><a href=\"#二维差分\" class=\"headerlink\" title=\"二维差分\"></a>二维差分</h3><p>其实也是一样的道理，简单推理便可以得到</p>\n<p>若想使<code>x1,y1,x2,y2</code>区间的数都加上加上一个c</p>\n<p>只需要对<code>b数组</code>做以下操作</p>\n<p><em><strong>b[x1][y1] +&#x3D; c</strong></em></p>\n<p><em><strong>b[x1][y2 + 1] -&#x3D; c</strong></em></p>\n<p><em><strong>b[x2 + 1][y1], -&#x3D; c</strong></em></p>\n<p><em><strong>b[x2 + 1][y2 + 1] +&#x3D; c</strong></em>   </p>\n<p><a href=\"https://www.acwing.com/activity/content/problem/content/832/\">模板题</a></p>\n<p>代码如下</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;bits/stdc++.h&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"type\">const</span> <span class=\"type\">int</span> lxb = <span class=\"number\">1e3</span> + <span class=\"number\">10</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"type\">int</span> n, m, q;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"type\">int</span> a[lxb][lxb], b[lxb][lxb];</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">insert</span> <span class=\"params\">(<span class=\"type\">int</span> x1, <span class=\"type\">int</span> y1, <span class=\"type\">int</span> x2, <span class=\"type\">int</span> y2, <span class=\"type\">int</span> c)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    b[x1][y1] += c;</span><br><span class=\"line\">    b[x1][y2 + <span class=\"number\">1</span>] -= c;</span><br><span class=\"line\">    b[x2 + <span class=\"number\">1</span>][y1] -= c;</span><br><span class=\"line\">    b[x2 +<span class=\"number\">1</span>][y2 + <span class=\"number\">1</span>] += c;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">cin &gt;&gt; n &gt;&gt; m &gt;&gt; q;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">for</span>(<span class=\"type\">int</span> i = <span class=\"number\">1</span>; i &lt;= n; i ++)</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"type\">int</span> j = <span class=\"number\">1</span>; j &lt;= m; j ++)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"built_in\">scanf</span>(<span class=\"string\">&quot;%d&quot;</span>,&amp;a[i][j]);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i = <span class=\"number\">1</span>; i &lt;= n; i ++)</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"type\">int</span> j = <span class=\"number\">1</span>; j &lt;= m; j ++)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"built_in\">insert</span>(i,j,i,j,a[i][j]);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">while</span>(q --)</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"type\">int</span> x1,y1,x2,y2,c;</span><br><span class=\"line\">    cin &gt;&gt; x1 &gt;&gt; y1 &gt;&gt; x2 &gt;&gt; y2 &gt;&gt; c;</span><br><span class=\"line\">    <span class=\"built_in\">insert</span>(x1,y1,x2,y2,c);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">for</span>(<span class=\"type\">int</span> i = <span class=\"number\">1</span>; i &lt;= n; i ++)</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"type\">int</span> j = <span class=\"number\">1</span>; j &lt;= m; j ++)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        b[i][j] += b[i - <span class=\"number\">1</span>][j] + b[i][j - <span class=\"number\">1</span>] - b[i <span class=\"number\">-1</span>][j - <span class=\"number\">1</span>];</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">for</span>(<span class=\"type\">int</span> i = <span class=\"number\">1</span>; i &lt;= n; i ++)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"type\">int</span> j = <span class=\"number\">1</span>; j &lt;= m; j ++)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;%d &quot;</span>,b[i][j]);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    <span class=\"built_in\">puts</span>(<span class=\"string\">&quot; &quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"","more":"<p>其实并不是很难的东西，只是怕又忘记了所以才写博客。</p>\n<h2 id=\"前缀和\"><a href=\"#前缀和\" class=\"headerlink\" title=\"前缀和\"></a>前缀和</h2><p>构造<code>数组b</code>为输入<code>数组a</code>的前缀和，输出一段数列的和时时间复杂度为O（1），适合大量的输出。</p>\n<h3 id=\"一维前缀和\"><a href=\"#一维前缀和\" class=\"headerlink\" title=\"一维前缀和\"></a>一维前缀和</h3><p><em><strong><a href=\"https://www.acwing.com/problem/content/797/\">模板题</a></strong></em></p>\n<p>显然无什么好说的</p>\n<p>在输入时<code>b[i] = b[i - 1] + a[i]</code>以构造<em><strong>前缀和数组</strong></em>即可  </p>\n<p>代码如下</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;bits/stdc++.h&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std;</span><br><span class=\"line\"><span class=\"type\">const</span> <span class=\"type\">int</span> lxb = <span class=\"number\">1e5</span> + <span class=\"number\">10</span>;</span><br><span class=\"line\"><span class=\"type\">int</span> q[lxb];</span><br><span class=\"line\"><span class=\"type\">int</span> n, m;</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">\tcin &gt;&gt; n &gt;&gt; m;</span><br><span class=\"line\">\t<span class=\"keyword\">for</span>(<span class=\"type\">int</span> i = <span class=\"number\">1</span>; i &lt;= n; i ++)</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\t<span class=\"type\">int</span> x; </span><br><span class=\"line\">\t\tcin &gt;&gt; x;</span><br><span class=\"line\">\t\tq[i] = q[i - <span class=\"number\">1</span>] + x;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">for</span>(<span class=\"type\">int</span> i = <span class=\"number\">1</span>; i &lt;= m; i ++)</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\t<span class=\"type\">int</span> l, r;</span><br><span class=\"line\">\t\tcin &gt;&gt; l &gt;&gt; r;</span><br><span class=\"line\">\t\tcout &lt;&lt; q[r] - q[l - <span class=\"number\">1</span>] &lt;&lt; endl;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"二维前缀和\"><a href=\"#二维前缀和\" class=\"headerlink\" title=\"二维前缀和\"></a>二维前缀和</h3><p><em><strong><a href=\"https://www.acwing.com/problem/content/798/\">模板题</a></strong></em></p>\n<p>其实本质上差别不大</p>\n<p>简单推理便可以得到x1,y1,x2,y2区间查询的和为</p>\n<p><code>s[x2][y2] - s[x1 - 1][y2] - s[x2][y1 - 1] + s[x1 - 1][y1 - 1]</code></p>\n<p>代码如下</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;bits/stdc++.h&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"type\">const</span> <span class=\"type\">int</span> lxb = <span class=\"number\">1010</span>;</span><br><span class=\"line\"><span class=\"type\">int</span> a[lxb][lxb],s[lxb][lxb];</span><br><span class=\"line\"><span class=\"type\">int</span> n, m, q;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">\tcin &gt;&gt; n &gt;&gt; m &gt;&gt; q;</span><br><span class=\"line\">\t<span class=\"keyword\">for</span>(<span class=\"type\">int</span> i = <span class=\"number\">1</span>; i &lt;= n; i ++)</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">for</span>(<span class=\"type\">int</span> j = <span class=\"number\">1</span>; j  &lt;= m; j ++)</span><br><span class=\"line\">\t\t&#123;</span><br><span class=\"line\">\t\t\t<span class=\"built_in\">scanf</span>(<span class=\"string\">&quot;%d&quot;</span>,&amp;a[i][j]);</span><br><span class=\"line\">\t\t\ts[i][j] = s[i][j - <span class=\"number\">1</span>] + s[i - <span class=\"number\">1</span>][j] - s[i - <span class=\"number\">1</span>][j - <span class=\"number\">1</span>] + a[i][j];</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">while</span>(q --)</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\t<span class=\"type\">int</span> x1, y1, x2, y2;</span><br><span class=\"line\">\t\t<span class=\"built_in\">scanf</span>(<span class=\"string\">&quot;%d%d%d%d&quot;</span>, &amp;x1, &amp;y1, &amp;x2, &amp;y2);</span><br><span class=\"line\">\t\t<span class=\"type\">int</span> ans = s[x2][y2] - s[x1 <span class=\"number\">-1</span>][y2] - s[x2][y1 <span class=\"number\">-1</span>] + s[x1 <span class=\"number\">-1</span>][y1 <span class=\"number\">-1</span>];</span><br><span class=\"line\">\t\tcout &lt;&lt; ans &lt;&lt; endl;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"差分\"><a href=\"#差分\" class=\"headerlink\" title=\"差分\"></a>差分</h2><p>差分便是构造的<code>b数组</code>的前缀和为<code>输入数组a</code>的前缀和，改变一个区间数据的时间复杂度为O（1），适合频繁插入数据。</p>\n<p>自己一般会理解为反向前缀和</p>\n<h3 id=\"一维差分\"><a href=\"#一维差分\" class=\"headerlink\" title=\"一维差分\"></a>一维差分</h3><p><a href=\"https://www.acwing.com/problem/content/799/\">模板题</a></p>\n<p>无话可说</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"type\">const</span> <span class=\"type\">int</span> N = <span class=\"number\">100010</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"type\">int</span> n, m;</span><br><span class=\"line\"><span class=\"type\">int</span> a[N], b[N];</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">insert</span><span class=\"params\">(<span class=\"type\">int</span> l, <span class=\"type\">int</span> r, <span class=\"type\">int</span> c)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    b[l] += c;</span><br><span class=\"line\">    b[r + <span class=\"number\">1</span>] -= c;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">scanf</span>(<span class=\"string\">&quot;%d%d&quot;</span>, &amp;n, &amp;m);</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"type\">int</span> i = <span class=\"number\">1</span>; i &lt;= n; i ++ ) <span class=\"built_in\">scanf</span>(<span class=\"string\">&quot;%d&quot;</span>, &amp;a[i]);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"type\">int</span> i = <span class=\"number\">1</span>; i &lt;= n; i ++ ) <span class=\"built_in\">insert</span>(i, i, a[i]);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">while</span> (m -- )</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"type\">int</span> l, r, c;</span><br><span class=\"line\">        <span class=\"built_in\">scanf</span>(<span class=\"string\">&quot;%d%d%d&quot;</span>, &amp;l, &amp;r, &amp;c);</span><br><span class=\"line\">        <span class=\"built_in\">insert</span>(l, r, c);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"type\">int</span> i = <span class=\"number\">1</span>; i &lt;= n; i ++ ) b[i] += b[i - <span class=\"number\">1</span>];</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"type\">int</span> i = <span class=\"number\">1</span>; i &lt;= n; i ++ ) <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;%d &quot;</span>, b[i]);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"二维差分\"><a href=\"#二维差分\" class=\"headerlink\" title=\"二维差分\"></a>二维差分</h3><p>其实也是一样的道理，简单推理便可以得到</p>\n<p>若想使<code>x1,y1,x2,y2</code>区间的数都加上加上一个c</p>\n<p>只需要对<code>b数组</code>做以下操作</p>\n<p><em><strong>b[x1][y1] +&#x3D; c</strong></em></p>\n<p><em><strong>b[x1][y2 + 1] -&#x3D; c</strong></em></p>\n<p><em><strong>b[x2 + 1][y1], -&#x3D; c</strong></em></p>\n<p><em><strong>b[x2 + 1][y2 + 1] +&#x3D; c</strong></em>   </p>\n<p><a href=\"https://www.acwing.com/activity/content/problem/content/832/\">模板题</a></p>\n<p>代码如下</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;bits/stdc++.h&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"type\">const</span> <span class=\"type\">int</span> lxb = <span class=\"number\">1e3</span> + <span class=\"number\">10</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"type\">int</span> n, m, q;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"type\">int</span> a[lxb][lxb], b[lxb][lxb];</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">insert</span> <span class=\"params\">(<span class=\"type\">int</span> x1, <span class=\"type\">int</span> y1, <span class=\"type\">int</span> x2, <span class=\"type\">int</span> y2, <span class=\"type\">int</span> c)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    b[x1][y1] += c;</span><br><span class=\"line\">    b[x1][y2 + <span class=\"number\">1</span>] -= c;</span><br><span class=\"line\">    b[x2 + <span class=\"number\">1</span>][y1] -= c;</span><br><span class=\"line\">    b[x2 +<span class=\"number\">1</span>][y2 + <span class=\"number\">1</span>] += c;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">cin &gt;&gt; n &gt;&gt; m &gt;&gt; q;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">for</span>(<span class=\"type\">int</span> i = <span class=\"number\">1</span>; i &lt;= n; i ++)</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"type\">int</span> j = <span class=\"number\">1</span>; j &lt;= m; j ++)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"built_in\">scanf</span>(<span class=\"string\">&quot;%d&quot;</span>,&amp;a[i][j]);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i = <span class=\"number\">1</span>; i &lt;= n; i ++)</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"type\">int</span> j = <span class=\"number\">1</span>; j &lt;= m; j ++)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"built_in\">insert</span>(i,j,i,j,a[i][j]);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">while</span>(q --)</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"type\">int</span> x1,y1,x2,y2,c;</span><br><span class=\"line\">    cin &gt;&gt; x1 &gt;&gt; y1 &gt;&gt; x2 &gt;&gt; y2 &gt;&gt; c;</span><br><span class=\"line\">    <span class=\"built_in\">insert</span>(x1,y1,x2,y2,c);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">for</span>(<span class=\"type\">int</span> i = <span class=\"number\">1</span>; i &lt;= n; i ++)</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"type\">int</span> j = <span class=\"number\">1</span>; j &lt;= m; j ++)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        b[i][j] += b[i - <span class=\"number\">1</span>][j] + b[i][j - <span class=\"number\">1</span>] - b[i <span class=\"number\">-1</span>][j - <span class=\"number\">1</span>];</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">for</span>(<span class=\"type\">int</span> i = <span class=\"number\">1</span>; i &lt;= n; i ++)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"type\">int</span> j = <span class=\"number\">1</span>; j &lt;= m; j ++)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;%d &quot;</span>,b[i][j]);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    <span class=\"built_in\">puts</span>(<span class=\"string\">&quot; &quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n"},{"title":"圣经","date":"2023-05-25T11:24:25.000Z","description":"无话可说高精度","_content":"# 无话可说高精度   \n__高精加__\n\n~~~c++\n#include <iostream>\n#include <vector>\n\nusing namespace std;\n\nconst int N = 1e6 + 10;\n\nvector <int> add(vector<int> &A,vector<int> &B)\n{\n    vector <int> C;\n\n    int t = 0;\n    for(int i = 0; i < A.size() || i < B.size(); i ++)\n    {\n        if(i < A.size()) t += A[i];\n        if(i < B.size()) t += B[i];\n        C.push_back(t%10);\n        t /= 10;\n    }\n    if(t) C.push_back(1);\n    return C;\n}\n\n\n\nint main()\n{\nstring a,b;\nvector <int> A, B;\n\ncin >> a >> b;\nfor(int i = a.size() - 1; i>= 0; i -- )  A.push_back(a[i] - '0');\nfor(int i = b.size() - 1; i>= 0; i -- )  B.push_back(b[i] - '0');\n\n\nauto C = add(A,B);\n\nfor(int i = C.size()-1;i >= 0; i --) printf(\"%d\",C[i]);\n    return 0;\n}\n\n ~~~\n \n ---\n __高精度减__\n \n ~~~c++\n #include <iostream>\n#include <vector>\n\nusing namespace std;\n\nconst int N = 1e6 + 10;\n\nbool cmp(vector<int> &A,vector<int> &B)\n{\n    if(A.size() != B.size()) return A.size() > B.size();\n\n    for(int i = A.size() ; i >= 0; i --)\n        if(A[i] != B[i])\n            return A[i] > B[i];\n    return true;\n    \n}\n\nvector <int> sub(vector<int> &A,vector<int> &B)\n{\n    vector <int> C;\nint t = 0;\n    for(int i = 0; i < A.size(); i ++)\n    {\n        t = A[i] - t;\n        if(i < B.size()) t -= B[i];\n        C.push_back((t + 10) % 10);\n        if(t < 0) t = 1;\n        else t = 0;\n    }\n\n    while(C.size() > 1 && C.back() == 0) C.pop_back();\n\n    return C;\n}\n\n\n\nint main()\n{\nstring a,b;\nvector <int> A, B;\n\ncin >> a >> b;\nfor(int i = a.size() - 1; i>= 0; i -- )  A.push_back(a[i] - '0');\nfor(int i = b.size() - 1; i>= 0; i -- )  B.push_back(b[i] - '0');\n\nif(cmp(A,B))\n{\n    auto C = sub(A,B);\n    for(int i = C.size()-1; i >= 0; i --) printf(\"%d\",C[i]);\n}\nelse\n{\n    auto C = sub(A,B);\n\n    printf(\"-\");\n    for(int i = C.size()-1;i >= 0; i --) printf(\"%d\",C[i]);\n}\n\n\n\n    return 0;\n}\n~~~\n\n__高精乘单精__    \n~~~c++\n// C = A * b, A >= 0, b >= 0\nvector<int> mul(vector<int> &A, int b)\n{\n    vector<int> C;\n\n    int t = 0;\n    for (int i = 0; i < A.size() || t; i ++ )\n    {\n        if (i < A.size()) t += A[i] * b;\n        C.push_back(t % 10);\n        t /= 10;\n    }\n\n    while (C.size() > 1 && C.back() == 0) C.pop_back();\n\n    return C;\n}\n\n\n~~~\n\n\n__高精除单精__\n\n~~~c++\n// A / b = C ... r, A >= 0, b > 0\nvector<int> div(vector<int> &A, int b, int &r)\n{\n    vector<int> C;\n    r = 0;\n    for (int i = A.size() - 1; i >= 0; i -- )\n    {\n        r = r * 10 + A[i];\n        C.push_back(r / b);\n        r %= b;\n    }\n    reverse(C.begin(), C.end());\n    while (C.size() > 1 && C.back() == 0) C.pop_back();\n    return C;\n}\n\n\n~~~\n","source":"_posts/圣经.md","raw":"---\ntitle: 圣经\ndate: 2023-05-25 19:24:25\ntags: 圣经\ndescription: 无话可说高精度\n---\n# 无话可说高精度   \n__高精加__\n\n~~~c++\n#include <iostream>\n#include <vector>\n\nusing namespace std;\n\nconst int N = 1e6 + 10;\n\nvector <int> add(vector<int> &A,vector<int> &B)\n{\n    vector <int> C;\n\n    int t = 0;\n    for(int i = 0; i < A.size() || i < B.size(); i ++)\n    {\n        if(i < A.size()) t += A[i];\n        if(i < B.size()) t += B[i];\n        C.push_back(t%10);\n        t /= 10;\n    }\n    if(t) C.push_back(1);\n    return C;\n}\n\n\n\nint main()\n{\nstring a,b;\nvector <int> A, B;\n\ncin >> a >> b;\nfor(int i = a.size() - 1; i>= 0; i -- )  A.push_back(a[i] - '0');\nfor(int i = b.size() - 1; i>= 0; i -- )  B.push_back(b[i] - '0');\n\n\nauto C = add(A,B);\n\nfor(int i = C.size()-1;i >= 0; i --) printf(\"%d\",C[i]);\n    return 0;\n}\n\n ~~~\n \n ---\n __高精度减__\n \n ~~~c++\n #include <iostream>\n#include <vector>\n\nusing namespace std;\n\nconst int N = 1e6 + 10;\n\nbool cmp(vector<int> &A,vector<int> &B)\n{\n    if(A.size() != B.size()) return A.size() > B.size();\n\n    for(int i = A.size() ; i >= 0; i --)\n        if(A[i] != B[i])\n            return A[i] > B[i];\n    return true;\n    \n}\n\nvector <int> sub(vector<int> &A,vector<int> &B)\n{\n    vector <int> C;\nint t = 0;\n    for(int i = 0; i < A.size(); i ++)\n    {\n        t = A[i] - t;\n        if(i < B.size()) t -= B[i];\n        C.push_back((t + 10) % 10);\n        if(t < 0) t = 1;\n        else t = 0;\n    }\n\n    while(C.size() > 1 && C.back() == 0) C.pop_back();\n\n    return C;\n}\n\n\n\nint main()\n{\nstring a,b;\nvector <int> A, B;\n\ncin >> a >> b;\nfor(int i = a.size() - 1; i>= 0; i -- )  A.push_back(a[i] - '0');\nfor(int i = b.size() - 1; i>= 0; i -- )  B.push_back(b[i] - '0');\n\nif(cmp(A,B))\n{\n    auto C = sub(A,B);\n    for(int i = C.size()-1; i >= 0; i --) printf(\"%d\",C[i]);\n}\nelse\n{\n    auto C = sub(A,B);\n\n    printf(\"-\");\n    for(int i = C.size()-1;i >= 0; i --) printf(\"%d\",C[i]);\n}\n\n\n\n    return 0;\n}\n~~~\n\n__高精乘单精__    \n~~~c++\n// C = A * b, A >= 0, b >= 0\nvector<int> mul(vector<int> &A, int b)\n{\n    vector<int> C;\n\n    int t = 0;\n    for (int i = 0; i < A.size() || t; i ++ )\n    {\n        if (i < A.size()) t += A[i] * b;\n        C.push_back(t % 10);\n        t /= 10;\n    }\n\n    while (C.size() > 1 && C.back() == 0) C.pop_back();\n\n    return C;\n}\n\n\n~~~\n\n\n__高精除单精__\n\n~~~c++\n// A / b = C ... r, A >= 0, b > 0\nvector<int> div(vector<int> &A, int b, int &r)\n{\n    vector<int> C;\n    r = 0;\n    for (int i = A.size() - 1; i >= 0; i -- )\n    {\n        r = r * 10 + A[i];\n        C.push_back(r / b);\n        r %= b;\n    }\n    reverse(C.begin(), C.end());\n    while (C.size() > 1 && C.back() == 0) C.pop_back();\n    return C;\n}\n\n\n~~~\n","slug":"圣经","published":1,"updated":"2023-06-07T04:56:25.964Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clilg6rh70004wsuf0de7bo72","content":"<h1 id=\"无话可说高精度\"><a href=\"#无话可说高精度\" class=\"headerlink\" title=\"无话可说高精度\"></a>无话可说高精度</h1><p><strong>高精加</strong></p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;vector&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"type\">const</span> <span class=\"type\">int</span> N = <span class=\"number\">1e6</span> + <span class=\"number\">10</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">vector &lt;<span class=\"type\">int</span>&gt; <span class=\"built_in\">add</span>(vector&lt;<span class=\"type\">int</span>&gt; &amp;A,vector&lt;<span class=\"type\">int</span>&gt; &amp;B)</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    vector &lt;<span class=\"type\">int</span>&gt; C;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"type\">int</span> t = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i = <span class=\"number\">0</span>; i &lt; A.<span class=\"built_in\">size</span>() || i &lt; B.<span class=\"built_in\">size</span>(); i ++)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(i &lt; A.<span class=\"built_in\">size</span>()) t += A[i];</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(i &lt; B.<span class=\"built_in\">size</span>()) t += B[i];</span><br><span class=\"line\">        C.<span class=\"built_in\">push_back</span>(t%<span class=\"number\">10</span>);</span><br><span class=\"line\">        t /= <span class=\"number\">10</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(t) C.<span class=\"built_in\">push_back</span>(<span class=\"number\">1</span>);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> C;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">string a,b;</span><br><span class=\"line\">vector &lt;<span class=\"type\">int</span>&gt; A, B;</span><br><span class=\"line\"></span><br><span class=\"line\">cin &gt;&gt; a &gt;&gt; b;</span><br><span class=\"line\"><span class=\"keyword\">for</span>(<span class=\"type\">int</span> i = a.<span class=\"built_in\">size</span>() - <span class=\"number\">1</span>; i&gt;= <span class=\"number\">0</span>; i -- )  A.<span class=\"built_in\">push_back</span>(a[i] - <span class=\"string\">&#x27;0&#x27;</span>);</span><br><span class=\"line\"><span class=\"keyword\">for</span>(<span class=\"type\">int</span> i = b.<span class=\"built_in\">size</span>() - <span class=\"number\">1</span>; i&gt;= <span class=\"number\">0</span>; i -- )  B.<span class=\"built_in\">push_back</span>(b[i] - <span class=\"string\">&#x27;0&#x27;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">auto</span> C = <span class=\"built_in\">add</span>(A,B);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">for</span>(<span class=\"type\">int</span> i = C.<span class=\"built_in\">size</span>()<span class=\"number\">-1</span>;i &gt;= <span class=\"number\">0</span>; i --) <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;%d&quot;</span>,C[i]);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<hr>\n<p> <strong>高精度减</strong></p>\n <figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"> <span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;vector&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"type\">const</span> <span class=\"type\">int</span> N = <span class=\"number\">1e6</span> + <span class=\"number\">10</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">bool</span> <span class=\"title\">cmp</span><span class=\"params\">(vector&lt;<span class=\"type\">int</span>&gt; &amp;A,vector&lt;<span class=\"type\">int</span>&gt; &amp;B)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(A.<span class=\"built_in\">size</span>() != B.<span class=\"built_in\">size</span>()) <span class=\"keyword\">return</span> A.<span class=\"built_in\">size</span>() &gt; B.<span class=\"built_in\">size</span>();</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i = A.<span class=\"built_in\">size</span>() ; i &gt;= <span class=\"number\">0</span>; i --)</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(A[i] != B[i])</span><br><span class=\"line\">            <span class=\"keyword\">return</span> A[i] &gt; B[i];</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\">    </span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">vector &lt;<span class=\"type\">int</span>&gt; <span class=\"built_in\">sub</span>(vector&lt;<span class=\"type\">int</span>&gt; &amp;A,vector&lt;<span class=\"type\">int</span>&gt; &amp;B)</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    vector &lt;<span class=\"type\">int</span>&gt; C;</span><br><span class=\"line\"><span class=\"type\">int</span> t = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i = <span class=\"number\">0</span>; i &lt; A.<span class=\"built_in\">size</span>(); i ++)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        t = A[i] - t;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(i &lt; B.<span class=\"built_in\">size</span>()) t -= B[i];</span><br><span class=\"line\">        C.<span class=\"built_in\">push_back</span>((t + <span class=\"number\">10</span>) % <span class=\"number\">10</span>);</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(t &lt; <span class=\"number\">0</span>) t = <span class=\"number\">1</span>;</span><br><span class=\"line\">        <span class=\"keyword\">else</span> t = <span class=\"number\">0</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">while</span>(C.<span class=\"built_in\">size</span>() &gt; <span class=\"number\">1</span> &amp;&amp; C.<span class=\"built_in\">back</span>() == <span class=\"number\">0</span>) C.<span class=\"built_in\">pop_back</span>();</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> C;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">string a,b;</span><br><span class=\"line\">vector &lt;<span class=\"type\">int</span>&gt; A, B;</span><br><span class=\"line\"></span><br><span class=\"line\">cin &gt;&gt; a &gt;&gt; b;</span><br><span class=\"line\"><span class=\"keyword\">for</span>(<span class=\"type\">int</span> i = a.<span class=\"built_in\">size</span>() - <span class=\"number\">1</span>; i&gt;= <span class=\"number\">0</span>; i -- )  A.<span class=\"built_in\">push_back</span>(a[i] - <span class=\"string\">&#x27;0&#x27;</span>);</span><br><span class=\"line\"><span class=\"keyword\">for</span>(<span class=\"type\">int</span> i = b.<span class=\"built_in\">size</span>() - <span class=\"number\">1</span>; i&gt;= <span class=\"number\">0</span>; i -- )  B.<span class=\"built_in\">push_back</span>(b[i] - <span class=\"string\">&#x27;0&#x27;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">if</span>(<span class=\"built_in\">cmp</span>(A,B))</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"keyword\">auto</span> C = <span class=\"built_in\">sub</span>(A,B);</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i = C.<span class=\"built_in\">size</span>()<span class=\"number\">-1</span>; i &gt;= <span class=\"number\">0</span>; i --) <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;%d&quot;</span>,C[i]);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">else</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"keyword\">auto</span> C = <span class=\"built_in\">sub</span>(A,B);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;-&quot;</span>);</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i = C.<span class=\"built_in\">size</span>()<span class=\"number\">-1</span>;i &gt;= <span class=\"number\">0</span>; i --) <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;%d&quot;</span>,C[i]);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><strong>高精乘单精</strong>    </p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// C = A * b, A &gt;= 0, b &gt;= 0</span></span><br><span class=\"line\"><span class=\"function\">vector&lt;<span class=\"type\">int</span>&gt; <span class=\"title\">mul</span><span class=\"params\">(vector&lt;<span class=\"type\">int</span>&gt; &amp;A, <span class=\"type\">int</span> b)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    vector&lt;<span class=\"type\">int</span>&gt; C;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"type\">int</span> t = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"type\">int</span> i = <span class=\"number\">0</span>; i &lt; A.<span class=\"built_in\">size</span>() || t; i ++ )</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (i &lt; A.<span class=\"built_in\">size</span>()) t += A[i] * b;</span><br><span class=\"line\">        C.<span class=\"built_in\">push_back</span>(t % <span class=\"number\">10</span>);</span><br><span class=\"line\">        t /= <span class=\"number\">10</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">while</span> (C.<span class=\"built_in\">size</span>() &gt; <span class=\"number\">1</span> &amp;&amp; C.<span class=\"built_in\">back</span>() == <span class=\"number\">0</span>) C.<span class=\"built_in\">pop_back</span>();</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> C;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n\n<p><strong>高精除单精</strong></p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// A / b = C ... r, A &gt;= 0, b &gt; 0</span></span><br><span class=\"line\"><span class=\"function\">vector&lt;<span class=\"type\">int</span>&gt; <span class=\"title\">div</span><span class=\"params\">(vector&lt;<span class=\"type\">int</span>&gt; &amp;A, <span class=\"type\">int</span> b, <span class=\"type\">int</span> &amp;r)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    vector&lt;<span class=\"type\">int</span>&gt; C;</span><br><span class=\"line\">    r = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"type\">int</span> i = A.<span class=\"built_in\">size</span>() - <span class=\"number\">1</span>; i &gt;= <span class=\"number\">0</span>; i -- )</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        r = r * <span class=\"number\">10</span> + A[i];</span><br><span class=\"line\">        C.<span class=\"built_in\">push_back</span>(r / b);</span><br><span class=\"line\">        r %= b;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"built_in\">reverse</span>(C.<span class=\"built_in\">begin</span>(), C.<span class=\"built_in\">end</span>());</span><br><span class=\"line\">    <span class=\"keyword\">while</span> (C.<span class=\"built_in\">size</span>() &gt; <span class=\"number\">1</span> &amp;&amp; C.<span class=\"built_in\">back</span>() == <span class=\"number\">0</span>) C.<span class=\"built_in\">pop_back</span>();</span><br><span class=\"line\">    <span class=\"keyword\">return</span> C;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"无话可说高精度\"><a href=\"#无话可说高精度\" class=\"headerlink\" title=\"无话可说高精度\"></a>无话可说高精度</h1><p><strong>高精加</strong></p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;vector&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"type\">const</span> <span class=\"type\">int</span> N = <span class=\"number\">1e6</span> + <span class=\"number\">10</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">vector &lt;<span class=\"type\">int</span>&gt; <span class=\"built_in\">add</span>(vector&lt;<span class=\"type\">int</span>&gt; &amp;A,vector&lt;<span class=\"type\">int</span>&gt; &amp;B)</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    vector &lt;<span class=\"type\">int</span>&gt; C;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"type\">int</span> t = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i = <span class=\"number\">0</span>; i &lt; A.<span class=\"built_in\">size</span>() || i &lt; B.<span class=\"built_in\">size</span>(); i ++)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(i &lt; A.<span class=\"built_in\">size</span>()) t += A[i];</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(i &lt; B.<span class=\"built_in\">size</span>()) t += B[i];</span><br><span class=\"line\">        C.<span class=\"built_in\">push_back</span>(t%<span class=\"number\">10</span>);</span><br><span class=\"line\">        t /= <span class=\"number\">10</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(t) C.<span class=\"built_in\">push_back</span>(<span class=\"number\">1</span>);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> C;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">string a,b;</span><br><span class=\"line\">vector &lt;<span class=\"type\">int</span>&gt; A, B;</span><br><span class=\"line\"></span><br><span class=\"line\">cin &gt;&gt; a &gt;&gt; b;</span><br><span class=\"line\"><span class=\"keyword\">for</span>(<span class=\"type\">int</span> i = a.<span class=\"built_in\">size</span>() - <span class=\"number\">1</span>; i&gt;= <span class=\"number\">0</span>; i -- )  A.<span class=\"built_in\">push_back</span>(a[i] - <span class=\"string\">&#x27;0&#x27;</span>);</span><br><span class=\"line\"><span class=\"keyword\">for</span>(<span class=\"type\">int</span> i = b.<span class=\"built_in\">size</span>() - <span class=\"number\">1</span>; i&gt;= <span class=\"number\">0</span>; i -- )  B.<span class=\"built_in\">push_back</span>(b[i] - <span class=\"string\">&#x27;0&#x27;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">auto</span> C = <span class=\"built_in\">add</span>(A,B);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">for</span>(<span class=\"type\">int</span> i = C.<span class=\"built_in\">size</span>()<span class=\"number\">-1</span>;i &gt;= <span class=\"number\">0</span>; i --) <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;%d&quot;</span>,C[i]);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<hr>\n<p> <strong>高精度减</strong></p>\n <figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"> <span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;vector&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"type\">const</span> <span class=\"type\">int</span> N = <span class=\"number\">1e6</span> + <span class=\"number\">10</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">bool</span> <span class=\"title\">cmp</span><span class=\"params\">(vector&lt;<span class=\"type\">int</span>&gt; &amp;A,vector&lt;<span class=\"type\">int</span>&gt; &amp;B)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(A.<span class=\"built_in\">size</span>() != B.<span class=\"built_in\">size</span>()) <span class=\"keyword\">return</span> A.<span class=\"built_in\">size</span>() &gt; B.<span class=\"built_in\">size</span>();</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i = A.<span class=\"built_in\">size</span>() ; i &gt;= <span class=\"number\">0</span>; i --)</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(A[i] != B[i])</span><br><span class=\"line\">            <span class=\"keyword\">return</span> A[i] &gt; B[i];</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\">    </span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">vector &lt;<span class=\"type\">int</span>&gt; <span class=\"built_in\">sub</span>(vector&lt;<span class=\"type\">int</span>&gt; &amp;A,vector&lt;<span class=\"type\">int</span>&gt; &amp;B)</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    vector &lt;<span class=\"type\">int</span>&gt; C;</span><br><span class=\"line\"><span class=\"type\">int</span> t = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i = <span class=\"number\">0</span>; i &lt; A.<span class=\"built_in\">size</span>(); i ++)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        t = A[i] - t;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(i &lt; B.<span class=\"built_in\">size</span>()) t -= B[i];</span><br><span class=\"line\">        C.<span class=\"built_in\">push_back</span>((t + <span class=\"number\">10</span>) % <span class=\"number\">10</span>);</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(t &lt; <span class=\"number\">0</span>) t = <span class=\"number\">1</span>;</span><br><span class=\"line\">        <span class=\"keyword\">else</span> t = <span class=\"number\">0</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">while</span>(C.<span class=\"built_in\">size</span>() &gt; <span class=\"number\">1</span> &amp;&amp; C.<span class=\"built_in\">back</span>() == <span class=\"number\">0</span>) C.<span class=\"built_in\">pop_back</span>();</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> C;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">string a,b;</span><br><span class=\"line\">vector &lt;<span class=\"type\">int</span>&gt; A, B;</span><br><span class=\"line\"></span><br><span class=\"line\">cin &gt;&gt; a &gt;&gt; b;</span><br><span class=\"line\"><span class=\"keyword\">for</span>(<span class=\"type\">int</span> i = a.<span class=\"built_in\">size</span>() - <span class=\"number\">1</span>; i&gt;= <span class=\"number\">0</span>; i -- )  A.<span class=\"built_in\">push_back</span>(a[i] - <span class=\"string\">&#x27;0&#x27;</span>);</span><br><span class=\"line\"><span class=\"keyword\">for</span>(<span class=\"type\">int</span> i = b.<span class=\"built_in\">size</span>() - <span class=\"number\">1</span>; i&gt;= <span class=\"number\">0</span>; i -- )  B.<span class=\"built_in\">push_back</span>(b[i] - <span class=\"string\">&#x27;0&#x27;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">if</span>(<span class=\"built_in\">cmp</span>(A,B))</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"keyword\">auto</span> C = <span class=\"built_in\">sub</span>(A,B);</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i = C.<span class=\"built_in\">size</span>()<span class=\"number\">-1</span>; i &gt;= <span class=\"number\">0</span>; i --) <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;%d&quot;</span>,C[i]);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">else</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"keyword\">auto</span> C = <span class=\"built_in\">sub</span>(A,B);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;-&quot;</span>);</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i = C.<span class=\"built_in\">size</span>()<span class=\"number\">-1</span>;i &gt;= <span class=\"number\">0</span>; i --) <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;%d&quot;</span>,C[i]);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><strong>高精乘单精</strong>    </p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// C = A * b, A &gt;= 0, b &gt;= 0</span></span><br><span class=\"line\"><span class=\"function\">vector&lt;<span class=\"type\">int</span>&gt; <span class=\"title\">mul</span><span class=\"params\">(vector&lt;<span class=\"type\">int</span>&gt; &amp;A, <span class=\"type\">int</span> b)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    vector&lt;<span class=\"type\">int</span>&gt; C;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"type\">int</span> t = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"type\">int</span> i = <span class=\"number\">0</span>; i &lt; A.<span class=\"built_in\">size</span>() || t; i ++ )</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (i &lt; A.<span class=\"built_in\">size</span>()) t += A[i] * b;</span><br><span class=\"line\">        C.<span class=\"built_in\">push_back</span>(t % <span class=\"number\">10</span>);</span><br><span class=\"line\">        t /= <span class=\"number\">10</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">while</span> (C.<span class=\"built_in\">size</span>() &gt; <span class=\"number\">1</span> &amp;&amp; C.<span class=\"built_in\">back</span>() == <span class=\"number\">0</span>) C.<span class=\"built_in\">pop_back</span>();</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> C;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n\n<p><strong>高精除单精</strong></p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// A / b = C ... r, A &gt;= 0, b &gt; 0</span></span><br><span class=\"line\"><span class=\"function\">vector&lt;<span class=\"type\">int</span>&gt; <span class=\"title\">div</span><span class=\"params\">(vector&lt;<span class=\"type\">int</span>&gt; &amp;A, <span class=\"type\">int</span> b, <span class=\"type\">int</span> &amp;r)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    vector&lt;<span class=\"type\">int</span>&gt; C;</span><br><span class=\"line\">    r = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"type\">int</span> i = A.<span class=\"built_in\">size</span>() - <span class=\"number\">1</span>; i &gt;= <span class=\"number\">0</span>; i -- )</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        r = r * <span class=\"number\">10</span> + A[i];</span><br><span class=\"line\">        C.<span class=\"built_in\">push_back</span>(r / b);</span><br><span class=\"line\">        r %= b;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"built_in\">reverse</span>(C.<span class=\"built_in\">begin</span>(), C.<span class=\"built_in\">end</span>());</span><br><span class=\"line\">    <span class=\"keyword\">while</span> (C.<span class=\"built_in\">size</span>() &gt; <span class=\"number\">1</span> &amp;&amp; C.<span class=\"built_in\">back</span>() == <span class=\"number\">0</span>) C.<span class=\"built_in\">pop_back</span>();</span><br><span class=\"line\">    <span class=\"keyword\">return</span> C;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n"},{"title":"排序","date":"2023-06-02T16:00:00.000Z","description":"挺久以前的东西了","_content":"# 快速排序    \n>主要基于分治思想      \n\n[不能再模板的模板题](https://www.acwing.com/problem/content/description/787/)  \n\n~~~c++    \n#include <bits/stdc++.h>\nusing namespace std;\n\nconst int N = 1e6 + 10;\n\nint n;\nint q[N];\n\nvoid quick_sort(int l, int r)\n{\n    if(l >= r) return;\n\n    int x = q[l], i = l - 1, j = r + 1; //就是这个地方导致的超市\n    while(i < j)\n    {\n        do i ++; while(q[i] < x);\n        do j --; while(q[j] > x);\n        if(i < j) swap(q[i],q[j]);\n    }\n    quick_sort(l,j);\n    quick_sort(j+1,r);\n}\n\nint main()\n{\n    scanf(\"%d\",&n);\n    for(int i = 0; i < n; i++) scanf(\"%d\",&q[i]);\n\n    sort(q,q+n);\n\n    for(int i=0;i<n;i++){cout<<q[i]<<\" \";};\n\n    return 0;\n}\n\n\n~~~     \n\n~~虽然甚至没有自带的快排快~~   \n还是传上来了。  __其实取点取随机数就不会超市了__       \n\n---   \n还是一样的题目，写一下\n# 归并排序   \n对比快排更加稳定，适合大数据量\n    \n~~~c++   \n#include  <bits/stdc++.h>\nusing namespace std;\nconst int MAXN = 1e8 + 10;\nint n, a[MAXN], T[MAXN];\nvoid Mergesort(int l, int r) {\n    if (l == r) return; //区间内只有一个数，返回\n    int mid = l + r >> 1; //相当于(l + r) / 2\n    Mergesort(l, mid); //递归左半部分\n    Mergesort(mid + 1, r); //递归右半部分\n    int i = l, j = mid + 1, k = l;\n    while (i <= mid && j <= r) //合并\n        if (a[i] <= a[j]) T[k++] = a[i++];\n        else T[k++] = a[j++];\n    while (i <= mid) T[k++] = a[i++];\n    while (j <= r) T[k++] = a[j++];\n    for (int q = l; q <= r; q++) a[q] = T[q]; //转移\n}\nint main() {\n    scanf(\"%d\", &n);\n    for (int i = 1; i <= n; i++) scanf(\"%d\", &a[i]);\n    Mergesort(1, n);\n    for (int i = 1; i <= n; i++) printf(\"%d \", a[i]);\n    return 0;\n}\n\n\n~~~     \n如果忘记了记得看这个    \n![](https://cdn.luogu.com.cn/upload/image_hosting/xssi3qec.png)\n\n至于冒泡和桶排，便没什么必要了吧\n","source":"_posts/排序.md","raw":"---\ntitle: 排序\ndate: 2023-06-03\ntags: 算法\ndescription: 挺久以前的东西了\n\n---\n# 快速排序    \n>主要基于分治思想      \n\n[不能再模板的模板题](https://www.acwing.com/problem/content/description/787/)  \n\n~~~c++    \n#include <bits/stdc++.h>\nusing namespace std;\n\nconst int N = 1e6 + 10;\n\nint n;\nint q[N];\n\nvoid quick_sort(int l, int r)\n{\n    if(l >= r) return;\n\n    int x = q[l], i = l - 1, j = r + 1; //就是这个地方导致的超市\n    while(i < j)\n    {\n        do i ++; while(q[i] < x);\n        do j --; while(q[j] > x);\n        if(i < j) swap(q[i],q[j]);\n    }\n    quick_sort(l,j);\n    quick_sort(j+1,r);\n}\n\nint main()\n{\n    scanf(\"%d\",&n);\n    for(int i = 0; i < n; i++) scanf(\"%d\",&q[i]);\n\n    sort(q,q+n);\n\n    for(int i=0;i<n;i++){cout<<q[i]<<\" \";};\n\n    return 0;\n}\n\n\n~~~     \n\n~~虽然甚至没有自带的快排快~~   \n还是传上来了。  __其实取点取随机数就不会超市了__       \n\n---   \n还是一样的题目，写一下\n# 归并排序   \n对比快排更加稳定，适合大数据量\n    \n~~~c++   \n#include  <bits/stdc++.h>\nusing namespace std;\nconst int MAXN = 1e8 + 10;\nint n, a[MAXN], T[MAXN];\nvoid Mergesort(int l, int r) {\n    if (l == r) return; //区间内只有一个数，返回\n    int mid = l + r >> 1; //相当于(l + r) / 2\n    Mergesort(l, mid); //递归左半部分\n    Mergesort(mid + 1, r); //递归右半部分\n    int i = l, j = mid + 1, k = l;\n    while (i <= mid && j <= r) //合并\n        if (a[i] <= a[j]) T[k++] = a[i++];\n        else T[k++] = a[j++];\n    while (i <= mid) T[k++] = a[i++];\n    while (j <= r) T[k++] = a[j++];\n    for (int q = l; q <= r; q++) a[q] = T[q]; //转移\n}\nint main() {\n    scanf(\"%d\", &n);\n    for (int i = 1; i <= n; i++) scanf(\"%d\", &a[i]);\n    Mergesort(1, n);\n    for (int i = 1; i <= n; i++) printf(\"%d \", a[i]);\n    return 0;\n}\n\n\n~~~     \n如果忘记了记得看这个    \n![](https://cdn.luogu.com.cn/upload/image_hosting/xssi3qec.png)\n\n至于冒泡和桶排，便没什么必要了吧\n","slug":"排序","published":1,"updated":"2023-06-07T04:56:34.130Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clilg6rhf0007wsuf1abq6tk1","content":"<h1 id=\"快速排序\"><a href=\"#快速排序\" class=\"headerlink\" title=\"快速排序\"></a>快速排序</h1><blockquote>\n<p>主要基于分治思想      </p>\n</blockquote>\n<p><a href=\"https://www.acwing.com/problem/content/description/787/\">不能再模板的模板题</a>  </p>\n<pre><code class=\"c++\">#include &lt;bits/stdc++.h&gt;\nusing namespace std;\n\nconst int N = 1e6 + 10;\n\nint n;\nint q[N];\n\nvoid quick_sort(int l, int r)\n&#123;\n    if(l &gt;= r) return;\n\n    int x = q[l], i = l - 1, j = r + 1; //就是这个地方导致的超市\n    while(i &lt; j)\n    &#123;\n        do i ++; while(q[i] &lt; x);\n        do j --; while(q[j] &gt; x);\n        if(i &lt; j) swap(q[i],q[j]);\n    &#125;\n    quick_sort(l,j);\n    quick_sort(j+1,r);\n&#125;\n\nint main()\n&#123;\n    scanf(&quot;%d&quot;,&amp;n);\n    for(int i = 0; i &lt; n; i++) scanf(&quot;%d&quot;,&amp;q[i]);\n\n    sort(q,q+n);\n\n    for(int i=0;i&lt;n;i++)&#123;cout&lt;&lt;q[i]&lt;&lt;&quot; &quot;;&#125;;\n\n    return 0;\n&#125;\n\n</code></pre>\n<p><del>虽然甚至没有自带的快排快</del><br>还是传上来了。  <strong>其实取点取随机数就不会超市了</strong>       </p>\n<hr>\n<p>还是一样的题目，写一下</p>\n<h1 id=\"归并排序\"><a href=\"#归并排序\" class=\"headerlink\" title=\"归并排序\"></a>归并排序</h1><p>对比快排更加稳定，适合大数据量</p>\n<pre><code class=\"c++\">#include  &lt;bits/stdc++.h&gt;\nusing namespace std;\nconst int MAXN = 1e8 + 10;\nint n, a[MAXN], T[MAXN];\nvoid Mergesort(int l, int r) &#123;\n    if (l == r) return; //区间内只有一个数，返回\n    int mid = l + r &gt;&gt; 1; //相当于(l + r) / 2\n    Mergesort(l, mid); //递归左半部分\n    Mergesort(mid + 1, r); //递归右半部分\n    int i = l, j = mid + 1, k = l;\n    while (i &lt;= mid &amp;&amp; j &lt;= r) //合并\n        if (a[i] &lt;= a[j]) T[k++] = a[i++];\n        else T[k++] = a[j++];\n    while (i &lt;= mid) T[k++] = a[i++];\n    while (j &lt;= r) T[k++] = a[j++];\n    for (int q = l; q &lt;= r; q++) a[q] = T[q]; //转移\n&#125;\nint main() &#123;\n    scanf(&quot;%d&quot;, &amp;n);\n    for (int i = 1; i &lt;= n; i++) scanf(&quot;%d&quot;, &amp;a[i]);\n    Mergesort(1, n);\n    for (int i = 1; i &lt;= n; i++) printf(&quot;%d &quot;, a[i]);\n    return 0;\n&#125;\n\n</code></pre>\n<p>如果忘记了记得看这个<br><img src=\"https://cdn.luogu.com.cn/upload/image_hosting/xssi3qec.png\"></p>\n<p>至于冒泡和桶排，便没什么必要了吧</p>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"快速排序\"><a href=\"#快速排序\" class=\"headerlink\" title=\"快速排序\"></a>快速排序</h1><blockquote>\n<p>主要基于分治思想      </p>\n</blockquote>\n<p><a href=\"https://www.acwing.com/problem/content/description/787/\">不能再模板的模板题</a>  </p>\n<pre><code class=\"c++\">#include &lt;bits/stdc++.h&gt;\nusing namespace std;\n\nconst int N = 1e6 + 10;\n\nint n;\nint q[N];\n\nvoid quick_sort(int l, int r)\n&#123;\n    if(l &gt;= r) return;\n\n    int x = q[l], i = l - 1, j = r + 1; //就是这个地方导致的超市\n    while(i &lt; j)\n    &#123;\n        do i ++; while(q[i] &lt; x);\n        do j --; while(q[j] &gt; x);\n        if(i &lt; j) swap(q[i],q[j]);\n    &#125;\n    quick_sort(l,j);\n    quick_sort(j+1,r);\n&#125;\n\nint main()\n&#123;\n    scanf(&quot;%d&quot;,&amp;n);\n    for(int i = 0; i &lt; n; i++) scanf(&quot;%d&quot;,&amp;q[i]);\n\n    sort(q,q+n);\n\n    for(int i=0;i&lt;n;i++)&#123;cout&lt;&lt;q[i]&lt;&lt;&quot; &quot;;&#125;;\n\n    return 0;\n&#125;\n\n</code></pre>\n<p><del>虽然甚至没有自带的快排快</del><br>还是传上来了。  <strong>其实取点取随机数就不会超市了</strong>       </p>\n<hr>\n<p>还是一样的题目，写一下</p>\n<h1 id=\"归并排序\"><a href=\"#归并排序\" class=\"headerlink\" title=\"归并排序\"></a>归并排序</h1><p>对比快排更加稳定，适合大数据量</p>\n<pre><code class=\"c++\">#include  &lt;bits/stdc++.h&gt;\nusing namespace std;\nconst int MAXN = 1e8 + 10;\nint n, a[MAXN], T[MAXN];\nvoid Mergesort(int l, int r) &#123;\n    if (l == r) return; //区间内只有一个数，返回\n    int mid = l + r &gt;&gt; 1; //相当于(l + r) / 2\n    Mergesort(l, mid); //递归左半部分\n    Mergesort(mid + 1, r); //递归右半部分\n    int i = l, j = mid + 1, k = l;\n    while (i &lt;= mid &amp;&amp; j &lt;= r) //合并\n        if (a[i] &lt;= a[j]) T[k++] = a[i++];\n        else T[k++] = a[j++];\n    while (i &lt;= mid) T[k++] = a[i++];\n    while (j &lt;= r) T[k++] = a[j++];\n    for (int q = l; q &lt;= r; q++) a[q] = T[q]; //转移\n&#125;\nint main() &#123;\n    scanf(&quot;%d&quot;, &amp;n);\n    for (int i = 1; i &lt;= n; i++) scanf(&quot;%d&quot;, &amp;a[i]);\n    Mergesort(1, n);\n    for (int i = 1; i &lt;= n; i++) printf(&quot;%d &quot;, a[i]);\n    return 0;\n&#125;\n\n</code></pre>\n<p>如果忘记了记得看这个<br><img src=\"https://cdn.luogu.com.cn/upload/image_hosting/xssi3qec.png\"></p>\n<p>至于冒泡和桶排，便没什么必要了吧</p>\n"},{"title":"期末前的规划","date":"2023-06-01T16:00:00.000Z","description":"总得有所取舍","_content":"\n前几天和学校请来的生涯规划师聊了几句，虽说对选课与人生并无什么帮助。\n\n\n但至少他告诉了我如此偏科三位一体是无望的，那么学考貌似也没有很重要了，为了未来的发展是该有所取舍。\n\n``不选的科目大抵不会再学，也不复习了，我该把更多的时间花在有价值的事情上``\n\n并附上期末前规划表\n\n\n* 数学的立体几何及平面向量方面复习与加强\n\n* 语文``至少``将所有的古文与注释熟悉\n\n* 英语将必修一开始的单词都再默写一次，且复习语法\n\n* 物理没什么好说的，跟上进度就是\n\n* 化学需提升，无机中氮硫等部分尤其需巩固\n\n* 技术？拜托！我是``OIer``欸！！！\n\n* 在信息竞赛上，刷完y总的算法基础课\n\n\n\n\n\n\n\n\n\n\n","source":"_posts/期末前规划表.md","raw":"---\n\ntitle: 期末前的规划\ndate: 2023-06-02\ntag: 日常\ndescription: 总得有所取舍\n---\n\n前几天和学校请来的生涯规划师聊了几句，虽说对选课与人生并无什么帮助。\n\n\n但至少他告诉了我如此偏科三位一体是无望的，那么学考貌似也没有很重要了，为了未来的发展是该有所取舍。\n\n``不选的科目大抵不会再学，也不复习了，我该把更多的时间花在有价值的事情上``\n\n并附上期末前规划表\n\n\n* 数学的立体几何及平面向量方面复习与加强\n\n* 语文``至少``将所有的古文与注释熟悉\n\n* 英语将必修一开始的单词都再默写一次，且复习语法\n\n* 物理没什么好说的，跟上进度就是\n\n* 化学需提升，无机中氮硫等部分尤其需巩固\n\n* 技术？拜托！我是``OIer``欸！！！\n\n* 在信息竞赛上，刷完y总的算法基础课\n\n\n\n\n\n\n\n\n\n\n","slug":"期末前规划表","published":1,"updated":"2023-06-07T04:56:42.309Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clilg6rhj0008wsuf2lzieovi","content":"<p>前几天和学校请来的生涯规划师聊了几句，虽说对选课与人生并无什么帮助。</p>\n<p>但至少他告诉了我如此偏科三位一体是无望的，那么学考貌似也没有很重要了，为了未来的发展是该有所取舍。</p>\n<p><code>不选的科目大抵不会再学，也不复习了，我该把更多的时间花在有价值的事情上</code></p>\n<p>并附上期末前规划表</p>\n<ul>\n<li><p>数学的立体几何及平面向量方面复习与加强</p>\n</li>\n<li><p>语文<code>至少</code>将所有的古文与注释熟悉</p>\n</li>\n<li><p>英语将必修一开始的单词都再默写一次，且复习语法</p>\n</li>\n<li><p>物理没什么好说的，跟上进度就是</p>\n</li>\n<li><p>化学需提升，无机中氮硫等部分尤其需巩固</p>\n</li>\n<li><p>技术？拜托！我是<code>OIer</code>欸！！！</p>\n</li>\n<li><p>在信息竞赛上，刷完y总的算法基础课</p>\n</li>\n</ul>\n","site":{"data":{}},"excerpt":"","more":"<p>前几天和学校请来的生涯规划师聊了几句，虽说对选课与人生并无什么帮助。</p>\n<p>但至少他告诉了我如此偏科三位一体是无望的，那么学考貌似也没有很重要了，为了未来的发展是该有所取舍。</p>\n<p><code>不选的科目大抵不会再学，也不复习了，我该把更多的时间花在有价值的事情上</code></p>\n<p>并附上期末前规划表</p>\n<ul>\n<li><p>数学的立体几何及平面向量方面复习与加强</p>\n</li>\n<li><p>语文<code>至少</code>将所有的古文与注释熟悉</p>\n</li>\n<li><p>英语将必修一开始的单词都再默写一次，且复习语法</p>\n</li>\n<li><p>物理没什么好说的，跟上进度就是</p>\n</li>\n<li><p>化学需提升，无机中氮硫等部分尤其需巩固</p>\n</li>\n<li><p>技术？拜托！我是<code>OIer</code>欸！！！</p>\n</li>\n<li><p>在信息竞赛上，刷完y总的算法基础课</p>\n</li>\n</ul>\n"},{"title":"生日！！！","date":"2023-05-31T16:00:00.000Z","_content":"\n\n# 祝我生日快乐\n\n下图是lzh的生日礼物\n\n![](https://cdn.luogu.com.cn/upload/image_hosting/97oopaal.png)\n\n\n另外提醒梅林和超级无敌暴龙武士不要忘了送我游戏↘\n","source":"_posts/生日.md","raw":"---\ntitle: 生日！！！\ndate: 2023-06-01\ntags: 日常\n---\n\n\n# 祝我生日快乐\n\n下图是lzh的生日礼物\n\n![](https://cdn.luogu.com.cn/upload/image_hosting/97oopaal.png)\n\n\n另外提醒梅林和超级无敌暴龙武士不要忘了送我游戏↘\n","slug":"生日","published":1,"updated":"2023-06-07T04:57:12.140Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clilg6rhp000awsuf98enddhb","content":"<h1 id=\"祝我生日快乐\"><a href=\"#祝我生日快乐\" class=\"headerlink\" title=\"祝我生日快乐\"></a>祝我生日快乐</h1><p>下图是lzh的生日礼物</p>\n<p><img src=\"https://cdn.luogu.com.cn/upload/image_hosting/97oopaal.png\"></p>\n<p>另外提醒梅林和超级无敌暴龙武士不要忘了送我游戏↘</p>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"祝我生日快乐\"><a href=\"#祝我生日快乐\" class=\"headerlink\" title=\"祝我生日快乐\"></a>祝我生日快乐</h1><p>下图是lzh的生日礼物</p>\n<p><img src=\"https://cdn.luogu.com.cn/upload/image_hosting/97oopaal.png\"></p>\n<p>另外提醒梅林和超级无敌暴龙武士不要忘了送我游戏↘</p>\n"}],"PostAsset":[],"PostCategory":[],"PostTag":[{"post_id":"clilg6rfz0000wsuf61z1hw73","tag_id":"clilg6rgm0002wsufc5s73go5","_id":"clilg6rhe0006wsufdqcq07e0"},{"post_id":"clilg6rge0001wsuf8fmx5hst","tag_id":"clilg6rha0005wsufdbvf3oao","_id":"clilg6rhr000bwsuf0t0i1gsx"},{"post_id":"clilg6rh30003wsufdyrig08a","tag_id":"clilg6rhn0009wsuf7ikj4wbq","_id":"clilg6rhu000dwsufd056bzf5"},{"post_id":"clilg6rh70004wsuf0de7bo72","tag_id":"clilg6rht000cwsuf2gbq4pts","_id":"clilg6ri0000fwsuf2d1t1s74"},{"post_id":"clilg6rhf0007wsuf1abq6tk1","tag_id":"clilg6rhn0009wsuf7ikj4wbq","_id":"clilg6ri3000hwsufextg83ws"},{"post_id":"clilg6rhj0008wsuf2lzieovi","tag_id":"clilg6ri1000gwsufh4bd7zkw","_id":"clilg6ri5000jwsufaok215vy"},{"post_id":"clilg6rhp000awsuf98enddhb","tag_id":"clilg6ri1000gwsufh4bd7zkw","_id":"clilg6ri6000kwsuf260y8xj0"}],"Tag":[{"name":"STL","_id":"clilg6rgm0002wsufc5s73go5"},{"name":"encrypt","_id":"clilg6rha0005wsufdbvf3oao"},{"name":"算法","_id":"clilg6rhn0009wsuf7ikj4wbq"},{"name":"圣经","_id":"clilg6rht000cwsuf2gbq4pts"},{"name":"日常","_id":"clilg6ri1000gwsufh4bd7zkw"}]}}